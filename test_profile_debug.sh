#!/bin/bash

echo "üß™ TEST COMPLET - PROFIL + INSTRUCTIONS IA"
echo "=========================================="

# Configuration
API_BASE="http://localhost:5000/api"
EMAIL="user@gmail.com"
PASSWORD="password"

# Fonction pour extraire le token
extract_token() {
    echo "$1" | grep -o '"token":"[^"]*"' | sed 's/"token":"//' | sed 's/"//'
}

# Fonction pour analyser le contenu de la lettre
analyze_letter_content() {
    local letter="$1"
    local instructions="$2"
    
    echo "üîç ANALYSE DU CONTENU DE LA LETTRE:"
    echo "=================================="
    
    # V√©rifier la longueur
    word_count=$(echo "$letter" | wc -w)
    echo "üìä Nombre de mots: $word_count"
    
    # V√©rifier le ton (recherche de mots-cl√©s)
    echo ""
    echo "üéØ V√âRIFICATION DES INSTRUCTIONS:"
    
    # Test 1: Ton professionnel vs moderne
    if echo "$instructions" | grep -qi "moderne\|dynamique\|cr√©atif"; then
        echo "üé® Instructions demandent un ton MODERNE/DYNAMIQUE"
        if echo "$letter" | grep -qi "passionn√©\|enthousiaste\|innovation\|cr√©ativit√©"; then
            echo "‚úÖ Ton moderne d√©tect√© dans la lettre"
        else
            echo "‚ùå Ton moderne NON d√©tect√© - possible probl√®me"
        fi
    fi
    
    if echo "$instructions" | grep -qi "professionnel\|formel\|classique"; then
        echo "üëî Instructions demandent un ton PROFESSIONNEL"
        if echo "$letter" | grep -qi "madame\|monsieur\|cordialement\|respectueusement"; then
            echo "‚úÖ Ton professionnel d√©tect√© dans la lettre"
        else
            echo "‚ùå Ton professionnel NON d√©tect√© - possible probl√®me"
        fi
    fi
    
    # Test 2: Longueur respect√©e
    if echo "$instructions" | grep -qi "concis\|court\|bref"; then
        echo "üìè Instructions demandent une lettre CONCISE"
        if [ $word_count -lt 200 ]; then
            echo "‚úÖ Lettre concise ($word_count mots < 200)"
        else
            echo "‚ùå Lettre trop longue ($word_count mots) pour instruction 'concise'"
        fi
    fi
    
    if echo "$instructions" | grep -qi "d√©taill√©\|complet\|approfondi"; then
        echo "üìñ Instructions demandent une lettre D√âTAILL√âE"
        if [ $word_count -gt 200 ]; then
            echo "‚úÖ Lettre d√©taill√©e ($word_count mots > 200)"
        else
            echo "‚ùå Lettre trop courte ($word_count mots) pour instruction 'd√©taill√©e'"
        fi
    fi
    
    # Test 3: Comp√©tences sp√©cifiques mentionn√©es
    if echo "$instructions" | grep -qi "technique\|informatique\|d√©veloppement"; then
        echo "üíª Instructions mentionnent des comp√©tences TECHNIQUES"
        if echo "$letter" | grep -qi "technique\|technologie\|d√©veloppement\|programmation"; then
            echo "‚úÖ Comp√©tences techniques mentionn√©es dans la lettre"
        else
            echo "‚ùå Comp√©tences techniques NON mentionn√©es"
        fi
    fi
    
    # Test 4: Exp√©rience mise en avant
    if echo "$instructions" | grep -qi "exp√©rience\|parcours\|ant√©c√©dent"; then
        echo "üèÜ Instructions demandent de valoriser l'EXP√âRIENCE"
        if echo "$letter" | grep -qi "exp√©rience\|parcours\|ann√©es\|poste pr√©c√©dent"; then
            echo "‚úÖ Exp√©rience mise en avant dans la lettre"
        else
            echo "‚ùå Exp√©rience NON mise en avant"
        fi
    fi
    
    echo ""
}

echo "üîê √âTAPE 1: Connexion..."
LOGIN_RESPONSE=$(curl -s -X POST "$API_BASE/auth/login" \
  -H "Content-Type: application/json" \
  -d "{\"email\":\"$EMAIL\",\"password\":\"$PASSWORD\"}")

echo "üì• R√©ponse login:"
echo "$LOGIN_RESPONSE"

TOKEN=$(extract_token "$LOGIN_RESPONSE")
echo "‚úÖ Token: ${TOKEN:0:30}..."
echo ""

# TEST 1: Instructions pour ton MODERNE et CONCIS
echo "üß™ TEST 1: Instructions TON MODERNE + CONCIS"
echo "============================================="

INSTRUCTIONS_1="Adopte un ton moderne et dynamique. Reste concis, maximum 150 mots. Mets l'accent sur ma cr√©ativit√© et mon innovation."

echo "üìù Instructions envoy√©es:"
echo "$INSTRUCTIONS_1"
echo ""

LETTER_RESPONSE_1=$(curl -s -X POST "$API_BASE/jobs/generate-cover-letter" \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $TOKEN" \
  -d "{
    \"jobDescription\": \"Recherche D√âVELOPPEUR WEB cr√©atif pour startup. Mission: cr√©ation d'interfaces innovantes, travail en √©quipe agile.\",
    \"jobTitle\": \"D√©veloppeur Web\",
    \"companyName\": \"TechStart Innovation\",
    \"aiInstructions\": \"$INSTRUCTIONS_1\",
    \"saveToHistory\": false
  }")

echo "üìÑ R√âPONSE TEST 1:"
echo "$LETTER_RESPONSE_1"
echo ""

# Extraire la lettre pour analyse
LETTER_1=$(echo "$LETTER_RESPONSE_1" | grep -o '"letter":"[^"]*"' | sed 's/"letter":"//' | sed 's/\\n/ /g' | sed 's/"//')
analyze_letter_content "$LETTER_1" "$INSTRUCTIONS_1"

echo ""
echo "=================================================="
echo ""

# TEST 2: Instructions pour ton PROFESSIONNEL et D√âTAILL√â
echo "üß™ TEST 2: Instructions TON PROFESSIONNEL + D√âTAILL√â"
echo "===================================================="

INSTRUCTIONS_2="Utilise un ton tr√®s professionnel et formel. R√©dige une lettre d√©taill√©e et compl√®te. Insiste sur mon exp√©rience et mes comp√©tences techniques en d√©veloppement."

echo "üìù Instructions envoy√©es:"
echo "$INSTRUCTIONS_2"
echo ""

LETTER_RESPONSE_2=$(curl -s -X POST "$API_BASE/jobs/generate-cover-letter" \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $TOKEN" \
  -d "{
    \"jobDescription\": \"Recherche ING√âNIEUR LOGICIEL senior. D√©veloppement d'applications complexes, gestion d'√©quipe, architecture syst√®me.\",
    \"jobTitle\": \"Ing√©nieur Logiciel Senior\",
    \"companyName\": \"Corporate Solutions Ltd\",
    \"aiInstructions\": \"$INSTRUCTIONS_2\",
    \"saveToHistory\": false
  }")

echo "üìÑ R√âPONSE TEST 2:"
echo "$LETTER_RESPONSE_2"
echo ""

# Extraire la lettre pour analyse
LETTER_2=$(echo "$LETTER_RESPONSE_2" | grep -o '"letter":"[^"]*"' | sed 's/"letter":"//' | sed 's/\\n/ /g' | sed 's/"//')
analyze_letter_content "$LETTER_2" "$INSTRUCTIONS_2"

echo ""
echo "=================================================="
echo ""

# TEST 3: Instructions CONTRADICTOIRES (pour tester la robustesse)
echo "üß™ TEST 3: Instructions CONTRADICTOIRES"
echo "======================================="

INSTRUCTIONS_3="Sois √† la fois tr√®s concis (moins de 100 mots) ET tr√®s d√©taill√©. Utilise un ton professionnel mais aussi tr√®s cr√©atif et moderne."

echo "üìù Instructions envoy√©es (contradictoires):"
echo "$INSTRUCTIONS_3"
echo ""

LETTER_RESPONSE_3=$(curl -s -X POST "$API_BASE/jobs/generate-cover-letter" \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $TOKEN" \
  -d "{
    \"jobDescription\": \"Poste polyvalent dans une PME. Gestion client, administration, projets divers.\",
    \"jobTitle\": \"Assistant Polyvalent\",
    \"companyName\": \"MultiT√¢ches SARL\",
    \"aiInstructions\": \"$INSTRUCTIONS_3\",
    \"saveToHistory\": false
  }")

echo "üìÑ R√âPONSE TEST 3:"
echo "$LETTER_RESPONSE_3"
echo ""

# Extraire la lettre pour analyse
LETTER_3=$(echo "$LETTER_RESPONSE_3" | grep -o '"letter":"[^"]*"' | sed 's/"letter":"//' | sed 's/\\n/ /g' | sed 's/"//')
analyze_letter_content "$LETTER_3" "$INSTRUCTIONS_3"

echo ""
echo "=================================================="
echo ""

# ANALYSE GLOBALE
echo "üìä ANALYSE GLOBALE DES TESTS"
echo "============================="

echo "üéØ V√âRIFICATIONS TECHNIQUES:"
echo "1. Les 3 tests ont-ils g√©n√©r√© des lettres diff√©rentes ?"
echo "2. Le profil utilisateur est-il utilis√© dans tous les cas ?"
echo "3. Les instructions sont-elles r√©ellement prises en compte ?"
echo ""

echo "‚úÖ R√âSUM√â DES OBSERVATIONS:"
echo "‚Ä¢ TEST 1 (Moderne/Concis): V√©rifiez le ton et la longueur"
echo "‚Ä¢ TEST 2 (Prof/D√©taill√©): V√©rifiez le formalisme et la longueur"  
echo "‚Ä¢ TEST 3 (Contradictoire): V√©rifiez comment l'IA g√®re les conflits"
echo ""

echo "üîç INDICATEURS DE QUALIT√â:"
echo "‚Ä¢ Lettres diff√©rentes = ‚úÖ Instructions prises en compte"
echo "‚Ä¢ Lettres identiques = ‚ùå Instructions ignor√©es"
echo "‚Ä¢ Profil utilis√© = ‚úÖ Syst√®me fonctionne"
echo "‚Ä¢ Profil non utilis√© = ‚ùå Probl√®me technique"
echo ""

echo "üéâ TEST TERMIN√â - ANALYSEZ LES R√âSULTATS CI-DESSUS"