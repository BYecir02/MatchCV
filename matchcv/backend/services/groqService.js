const Groq = require('groq-sdk');

// ‚≠ê V√âRIFIER : Initialisation du client Groq
const groq = new Groq({
  apiKey: process.env.GROQ_API_KEY
});

const groqService = {
  
  async analyzeCVAndExtractProfile(cvText) {
    try {
      console.log('ü§ñ D√©but analyse CV avec Groq...');
      
      if (!process.env.GROQ_API_KEY) {
        throw new Error('GROQ_API_KEY non configur√©e dans les variables d\'environnement');
      }

const prompt = `
Tu es un expert en analyse de CV. Analyse le CV suivant et extrait les informations dans un format JSON structur√©.

CV √Ä ANALYSER:
${cvText}

INSTRUCTIONS IMPORTANTES:
1. Extrait toutes les informations personnelles, exp√©riences, formations, comp√©tences, etc.
2. Structure les donn√©es selon le format demand√©
3. Pour les dates, utilise le format YYYY-MM-DD quand possible
4. RESPECTE ABSOLUMENT les valeurs enum suivantes:

VALEURS ENUM OBLIGATOIRES:
- skills.category: UNIQUEMENT "Technique", "Programmation", "Framework/Librairie", "Base de donn√©es", "DevOps/Cloud", "Design/UX", "Gestion de projet", "Marketing", "Communication", "Langues", "Soft Skills", "Autre"
- skills.proficiencyLevel: UNIQUEMENT "beginner", "intermediate", "advanced", "expert", "master"
- interests.category: UNIQUEMENT "Sport", "Arts", "Musique", "Lecture", "Cuisine", "Voyage", "Technologie", "Jeux", "Nature", "B√©n√©volat", "Culture", "Loisirs", "Collection", "Artisanat", "Autre"
- interests.level: UNIQUEMENT "D√©butant", "Amateur", "Passionn√©", "Expert", "Professionnel"
- languages.proficiencyLevel: UNIQUEMENT "basic", "conversational", "fluent", "native", "professional"

R√âPONSE ATTENDUE - UNIQUEMENT LE JSON (pas de texte explicatif avant ou apr√®s):
{
  "personalInfo": {
    "firstName": "",
    "lastName": "",
    "email": "",
    "phone": "",
    "location": "",
    "title": "",
    "summary": "",
    "linkedinUrl": "",
    "githubUrl": "",
    "portfolioUrl": ""
  },
  "experience": [{
    "company": "",
    "position": "",
    "startDate": "",
    "endDate": "",
    "isCurrent": false,
    "location": "",
    "description": "",
    "achievements": [],
    "technologiesUsed": []
  }],
  "education": [{
    "institutionName": "",
    "degreeType": "",
    "fieldOfStudy": "",
    "location": "",
    "startDate": "",
    "endDate": "",
    "grade": "",
    "description": "",
    "honors": []
  }],
  "skills": [{
    "skillName": "",
    "category": "Technique",
    "proficiencyLevel": "intermediate",
    "yearsExperience": 1,
    "isPrimary": false
  }],
  "languages": [{
    "languageName": "",
    "proficiencyLevel": "conversational",
    "certification": "",
    "description": ""
  }],
  "projects": [{
    "projectName": "",
    "description": "",
    "projectUrl": "",
    "repositoryUrl": "",
    "technologiesUsed": [],
    "startDate": "",
    "endDate": "",
    "isOngoing": false,
    "screenshots": []
  }],
  "certifications": [{
    "certificationName": "",
    "issuingOrganization": "",
    "credentialId": "",
    "issueDate": "",
    "expirationDate": "",
    "credentialUrl": "",
    "neverExpires": false
  }],
  "interests": [{
    "interestName": "",
    "category": "Loisirs",
    "description": "",
    "level": "Amateur",
    "isActive": true
  }]
}

IMPORTANT: Retourne UNIQUEMENT le JSON, sans texte d'introduction ou d'explication.
Pour les comp√©tences web, utilise "Technique" ou "Programmation" selon le contexte.`;

      const completion = await groq.chat.completions.create({
        messages: [
          {
            role: "system",
            content: "Tu es un expert en analyse de CV. Tu extrais les informations de CV et les structures en JSON valide avec les bonnes valeurs enum. Retourne UNIQUEMENT le JSON, sans texte explicatif."
          },
          {
            role: "user",
            content: prompt
          }
        ],
        model: "llama-3.1-8b-instant",
        temperature: 0.1,
        max_tokens: 4000,
        top_p: 1,
        stream: false
      });

      const responseText = completion.choices[0]?.message?.content;
      
      if (!responseText) {
        throw new Error('R√©ponse vide de Groq');
      }

      console.log('ü§ñ R√©ponse brute Groq:', responseText.substring(0, 200) + '...');

      let cleanedResponse = responseText.trim();
      
      const firstBrace = cleanedResponse.indexOf('{');
      if (firstBrace > 0) {
        cleanedResponse = cleanedResponse.substring(firstBrace);
        console.log('üßπ Texte d\'introduction supprim√©');
      }
      
      const lastBrace = cleanedResponse.lastIndexOf('}');
      if (lastBrace > 0 && lastBrace < cleanedResponse.length - 1) {
        cleanedResponse = cleanedResponse.substring(0, lastBrace + 1);
        console.log('üßπ Texte de conclusion supprim√©');
      }
      
      cleanedResponse = cleanedResponse.replace(/```json\n?/g, '').replace(/```\n?/g, '');
      cleanedResponse = cleanedResponse.replace(/^\s*```[\s\S]*?\n/, '').replace(/\n```\s*$/, '');
      
      try {
        const extractedData = JSON.parse(cleanedResponse);
        const normalizedData = this.normalizeExtractedData(extractedData);
        
        console.log('‚úÖ Donn√©es extraites et normalis√©es avec succ√®s');
        return normalizedData;
      } catch (parseError) {
        console.error('‚ùå Erreur parsing JSON:', parseError);
        console.error('üîç R√©ponse probl√©matique:', cleanedResponse.substring(0, 500));
        return this.extractBasicInfo(cvText);
      }

    } catch (error) {
      console.error('‚ùå Erreur Groq:', error);
      return this.extractBasicInfo(cvText);
    }
  },

  normalizeExtractedData(data) {
    console.log('üîß Normalisation des valeurs enum...');
    
    if (data.skills && Array.isArray(data.skills)) {
      data.skills = data.skills.map(skill => ({
        ...skill,
        category: this.normalizeSkillCategory(skill.category),
        proficiencyLevel: this.normalizeProficiencyLevel(skill.proficiencyLevel)
      }));
    }

    if (data.interests && Array.isArray(data.interests)) {
      data.interests = data.interests.map(interest => ({
        ...interest,
        category: this.normalizeInterestCategory(interest.category),
        level: this.normalizeInterestLevel(interest.level)
      }));
    }

    if (data.languages && Array.isArray(data.languages)) {
      data.languages = data.languages.map(language => ({
        ...language,
        proficiencyLevel: this.normalizeLanguageProficiency(language.proficiencyLevel)
      }));
    }

    console.log('‚úÖ Normalisation termin√©e');
    return data;
  },

  normalizeSkillCategory(category) {
    const mapping = {
      'Technique': 'Technique',
      'technique': 'Technique',
      'Technical': 'Technique',
      'technical': 'Technique',
      'Programmation': 'Programmation',
      'programmation': 'Programmation',
      'Programming': 'Programmation',
      'programming': 'Programmation',
      'Framework': 'Framework/Librairie',
      'framework': 'Framework/Librairie',
      'Librairie': 'Framework/Librairie',
      'librairie': 'Framework/Librairie',
      'Library': 'Framework/Librairie',
      'library': 'Framework/Librairie',
      'Base de donn√©es': 'Base de donn√©es',
      'base de donn√©es': 'Base de donn√©es',
      'Database': 'Base de donn√©es',
      'database': 'Base de donn√©es',
      'DevOps': 'DevOps/Cloud',
      'devops': 'DevOps/Cloud',
      'Cloud': 'DevOps/Cloud',
      'cloud': 'DevOps/Cloud',
      'Design': 'Design/UX',
      'design': 'Design/UX',
      'UX': 'Design/UX',
      'ux': 'Design/UX',
      'UI/UX': 'Design/UX',
      'Gestion': 'Gestion de projet',
      'gestion': 'Gestion de projet',
      'Project Management': 'Gestion de projet',
      'Marketing': 'Marketing',
      'marketing': 'Marketing',
      'Communication': 'Communication',
      'communication': 'Communication',
      'Soft Skills': 'Soft Skills',
      'soft skills': 'Soft Skills',
      'Personnel': 'Soft Skills',
      'personnel': 'Soft Skills',
      'Personal': 'Soft Skills',
      'personal': 'Soft Skills',
      'Langues': 'Langues',
      'langues': 'Langues',
      'Languages': 'Langues',
      'languages': 'Langues',
      'Langue': 'Langues',
      'langue': 'Langues',
      'Language': 'Langues',
      'language': 'Langues',
      'Autre': 'Autre',
      'autre': 'Autre',
      'Other': 'Autre',
      'other': 'Autre'
    };
    return mapping[category] || 'Technique';
  },

  normalizeProficiencyLevel(level) {
    const mapping = {
      'D√©butant': 'beginner',
      'd√©butant': 'beginner',
      'Beginner': 'beginner',
      'beginner': 'beginner',
      'Interm√©diaire': 'intermediate',
      'interm√©diaire': 'intermediate',
      'Intermediate': 'intermediate',
      'intermediate': 'intermediate',
      'Avanc√©': 'advanced',
      'avanc√©': 'advanced',
      'Advanced': 'advanced',
      'advanced': 'advanced',
      'Expert': 'expert',
      'expert': 'expert',
      'Master': 'master',
      'master': 'master'
    };
    return mapping[level] || 'intermediate';
  },

  normalizeInterestCategory(category) {
    const mapping = {
      'Sport': 'Sport',
      'sport': 'Sport',
      'Sports': 'Sport',
      'sports': 'Sport',
      'Arts': 'Arts',
      'art': 'Arts',
      'Art': 'Arts',
      'arts': 'Arts',
      'Musique': 'Musique',
      'musique': 'Musique',
      'Music': 'Musique',
      'music': 'Musique',
      'Lecture': 'Lecture',
      'lecture': 'Lecture',
      'Reading': 'Lecture',
      'reading': 'Lecture',
      'Cuisine': 'Cuisine',
      'cuisine': 'Cuisine',
      'Cooking': 'Cuisine',
      'cooking': 'Cuisine',
      'Voyage': 'Voyage',
      'voyage': 'Voyage',
      'Travel': 'Voyage',
      'travel': 'Voyage',
      'Technologie': 'Technologie',
      'technologie': 'Technologie',
      'Technology': 'Technologie',
      'technology': 'Technologie',
      'Jeux': 'Jeux',
      'jeux': 'Jeux',
      'Games': 'Jeux',
      'games': 'Jeux',
      'Gaming': 'Jeux',
      'gaming': 'Jeux',
      'Nature': 'Nature',
      'nature': 'Nature',
      'B√©n√©volat': 'B√©n√©volat',
      'b√©n√©volat': 'B√©n√©volat',
      'Volunteer': 'B√©n√©volat',
      'volunteer': 'B√©n√©volat',
      'Culture': 'Culture',
      'culture': 'Culture',
      'Cultural': 'Culture',
      'cultural': 'Culture',
      'Loisirs': 'Loisirs',
      'loisirs': 'Loisirs',
      'Hobby': 'Loisirs',
      'hobby': 'Loisirs',
      'Personal': 'Loisirs',
      'personal': 'Loisirs',
      'Collection': 'Collection',
      'collection': 'Collection',
      'Artisanat': 'Artisanat',
      'artisanat': 'Artisanat',
      'Craft': 'Artisanat',
      'craft': 'Artisanat',
      'Autre': 'Autre',
      'autre': 'Autre',
      'Other': 'Autre',
      'other': 'Autre'
    };
    return mapping[category] || 'Loisirs';
  },

  normalizeInterestLevel(level) {
    const mapping = {
      'D√©butant': 'D√©butant',
      'd√©butant': 'D√©butant',
      'Beginner': 'D√©butant',
      'beginner': 'D√©butant',
      'Amateur': 'Amateur',
      'amateur': 'Amateur',
      'Hobby': 'Amateur',
      'hobby': 'Amateur',
      'Intermediate': 'Amateur',
      'intermediate': 'Amateur',
      'Passionn√©': 'Passionn√©',
      'passionn√©': 'Passionn√©',
      'Passionate': 'Passionn√©',
      'passionate': 'Passionn√©',
      'Expert': 'Expert',
      'expert': 'Expert',
      'Advanced': 'Expert',
      'advanced': 'Expert',
      'Professionnel': 'Professionnel',
      'professionnel': 'Professionnel',
      'Professional': 'Professionnel',
      'professional': 'Professionnel'
    };
    return mapping[level] || 'Amateur';
  },

  normalizeLanguageProficiency(level) {
    const mapping = {
      'D√©butant': 'basic',
      'd√©butant': 'basic',
      'Beginner': 'basic',
      'beginner': 'basic',
      'basic': 'basic',
      'Basic': 'basic',
      'Interm√©diaire': 'conversational',
      'interm√©diaire': 'conversational',
      'Intermediate': 'conversational',
      'intermediate': 'conversational',
      'conversational': 'conversational',
      'Conversational': 'conversational',
      'Avanc√©': 'fluent',
      'avanc√©': 'fluent',
      'Advanced': 'fluent',
      'advanced': 'fluent',
      'fluent': 'fluent',
      'Fluent': 'fluent',
      'Natif': 'native',
      'natif': 'native',
      'Native': 'native',
      'native': 'native',
      'Langue maternelle': 'native',
      'langue maternelle': 'native',
      'Professionnel': 'professional',
      'professionnel': 'professional',
      'Professional': 'professional',
      'professional': 'professional'
    };
    return mapping[level] || 'conversational';
  },

  extractBasicInfo(cvText) {
    console.log('üîÑ Utilisation de l\'extraction basique (fallback)');
    
    const lines = cvText.split('\n').map(line => line.trim()).filter(line => line);
    
    const nameRegex = /\*\*([^*]+)\*\*/;
    let firstName = '';
    let lastName = '';
    
    const fullNameMatch = cvText.match(nameRegex);
    if (fullNameMatch) {
      const fullName = fullNameMatch[1].trim();
      const nameParts = fullName.split(/\s+/);
      
      if (nameParts.length >= 2) {
        firstName = nameParts[0];
        lastName = nameParts.slice(1).join(' ');
      } else {
        firstName = fullName;
      }
    }
    
    const emailMatch = cvText.match(/[\w.-]+@[\w.-]+\.\w+/);
    const email = emailMatch ? emailMatch[0] : '';
    
    const phoneMatch = cvText.match(/üìû\s*([0-9\s\-\+\(\)]{10,})/);
    const phone = phoneMatch ? phoneMatch[1].trim() : '';
    
    const extractedData = {
      personalInfo: {
        firstName,
        lastName,
        email,
        phone,
        location: '',
        title: '',
        summary: '',
        linkedinUrl: '',
        githubUrl: '',
        portfolioUrl: ''
      },
      experience: [],
      education: [],
      skills: [],
      languages: [],
      projects: [],
      certifications: [],
      interests: []
    };

    const skillsSection = cvText.match(/(?:COMP√âTENCES|SKILLS)([\s\S]*?)(?=(?:\n#{1,3}|\n[A-Z]{2,}|\n---|\Z))/i);
    if (skillsSection) {
      const skillsText = skillsSection[1];
      const skills = skillsText.match(/(?:JavaScript|React|Vue|Node|Python|PHP|Java|HTML|CSS|SQL|MongoDB|MySQL|Docker|AWS|Git|TypeScript|Angular|Figma)/gi) || [];
      
      skills.forEach(skill => {
        extractedData.skills.push({
          skillName: skill,
          category: 'Technique',
          proficiencyLevel: 'intermediate',
          yearsExperience: 1,
          isPrimary: false
        });
      });
    }

    if (cvText.match(/fran√ßais/i)) {
      extractedData.languages.push({
        languageName: 'Fran√ßais',
        proficiencyLevel: 'native',
        certification: '',
        description: ''
      });
    }

    if (cvText.match(/anglais/i)) {
      extractedData.languages.push({
        languageName: 'Anglais',
        proficiencyLevel: 'conversational',
        certification: '',
        description: ''
      });
    }

    console.log('‚úÖ Donn√©es extraites (fallback):', Object.keys(extractedData));
    return extractedData;
  },

  // ‚≠ê ANALYSER UNE ANNONCE D'EMPLOI AVEC PROFIL UTILISATEUR COMPLET - ULTRA-AM√âLIOR√â
  async analyzeJob(jobText, userProfile = null) {
    try {
      console.log('üîç D√©but analyse annonce d\'emploi...');
      console.log('üë§ Profil utilisateur fourni:', !!userProfile);
      
      if (!process.env.GROQ_API_KEY) {
        throw new Error('GROQ_API_KEY non configur√©e');
      }

      // ‚úÖ CONSTRUIRE UNE DESCRIPTION ULTRA-COMPL√àTE DU PROFIL
      let userSkillsList = [];
      let userExperienceText = '';
      let userEducationText = '';
      let userProjectsText = '';
      let userCertificationsText = '';
      let userLanguagesText = '';
      let userInterestsText = '';
      
      if (userProfile) {
        // ‚úÖ COMP√âTENCES D√âTAILL√âES
        if (userProfile.skills && Array.isArray(userProfile.skills)) {
          userSkillsList = userProfile.skills.map(skill => ({
            name: skill.skillName,
            level: skill.proficiencyLevel,
            years: skill.yearsExperience || 0,
            category: skill.category || 'Technique',
            isPrimary: skill.isPrimary || false
          }));
          console.log('üõ†Ô∏è Comp√©tences utilisateur:', userSkillsList.length);
        }

        // ‚úÖ EXP√âRIENCES ULTRA-D√âTAILL√âES
        if (userProfile.experience && Array.isArray(userProfile.experience)) {
          userExperienceText = userProfile.experience.map((exp, index) => {
            let expText = `${exp.position || 'Poste'} chez ${exp.company || 'Entreprise'}`;
            
            // P√©riode et dur√©e
            if (exp.startDate || exp.endDate) {
              const period = exp.startDate ? 
                `${exp.startDate}${exp.endDate ? ` - ${exp.endDate}` : ' - Actuellement'}` : 
                `Jusqu'√† ${exp.endDate}`;
              expText += ` (${period})`;
            }
            if (exp.duration) expText += ` [${exp.duration}]`;
            
            // Localisation
            if (exp.location) expText += ` - ${exp.location}`;
            
            // Description d√©taill√©e
            if (exp.description) expText += ` | Mission: ${exp.description}`;
            
            // R√©alisations/Achievements
            if (exp.achievements && exp.achievements.length > 0) {
              expText += ` | R√©alisations: ${exp.achievements.join(', ')}`;
            }
            
            // Technologies utilis√©es
            if (exp.technologiesUsed && exp.technologiesUsed.length > 0) {
              expText += ` | Technologies: ${exp.technologiesUsed.join(', ')}`;
            }
            
            // Indicateur si c'est l'emploi actuel
            if (exp.isCurrent) {
              expText += ` | POSTE ACTUEL`;
            }
            
            return `[EXP ${index + 1}] ${expText}`;
          }).join('\n');
          
          console.log('üíº Exp√©riences utilisateur COMPL√àTES:', userProfile.experience.length);
        }

        // ‚úÖ FORMATIONS D√âTAILL√âES
        if (userProfile.education && Array.isArray(userProfile.education)) {
          userEducationText = userProfile.education.map((edu, index) => {
            let eduText = `${edu.degreeType || 'Dipl√¥me'} en ${edu.fieldOfStudy || 'Domaine'} √† ${edu.institutionName || '√âtablissement'}`;
            
            if (edu.startDate || edu.endDate) {
              const period = edu.startDate ? 
                `${edu.startDate}${edu.endDate ? ` - ${edu.endDate}` : ' - En cours'}` : 
                `Jusqu'√† ${edu.endDate}`;
              eduText += ` (${period})`;
            }
            
            if (edu.location) eduText += ` - ${edu.location}`;
            if (edu.grade) eduText += ` | Mention: ${edu.grade}`;
            if (edu.description) eduText += ` | Description: ${edu.description}`;
            if (edu.honors && edu.honors.length > 0) eduText += ` | Distinctions: ${edu.honors.join(', ')}`;
            
            return `[EDU ${index + 1}] ${eduText}`;
          }).join('\n');
          console.log('üéì Formations utilisateur COMPL√àTES:', userProfile.education.length);
        }

        // ‚úÖ PROJETS ULTRA-D√âTAILL√âS
        if (userProfile.projects && Array.isArray(userProfile.projects)) {
          userProjectsText = userProfile.projects.map((proj, index) => {
            let projText = `${proj.projectName || 'Projet'}`;
            if (proj.description) projText += `: ${proj.description}`;
            
            if (proj.technologiesUsed && proj.technologiesUsed.length > 0) {
              projText += ` | Technologies: ${proj.technologiesUsed.join(', ')}`;
            }
            
            if (proj.projectUrl) projText += ` | URL: ${proj.projectUrl}`;
            if (proj.repositoryUrl) projText += ` | Repository: ${proj.repositoryUrl}`;
            
            if (proj.startDate) projText += ` | D√©but: ${proj.startDate}`;
            if (proj.endDate) projText += ` | Fin: ${proj.endDate}`;
            if (proj.isOngoing) projText += ` | EN COURS`;
            
            return `[PROJET ${index + 1}] ${projText}`;
          }).join('\n');
          
          console.log('üöÄ Projets utilisateur COMPLETS:', userProfile.projects.length);
        }

        // ‚úÖ CERTIFICATIONS D√âTAILL√âES
        if (userProfile.certifications && Array.isArray(userProfile.certifications)) {
          userCertificationsText = userProfile.certifications.map((cert, index) => {
            let certText = `${cert.certificationName || 'Certification'} d√©livr√© par ${cert.issuingOrganization || 'Organisme'}`;
            
            if (cert.issueDate) certText += ` | Obtenu: ${cert.issueDate}`;
            if (cert.expirationDate && !cert.neverExpires) certText += ` | Expire: ${cert.expirationDate}`;
            if (cert.neverExpires) certText += ` | Valide √† vie`;
            if (cert.credentialId) certText += ` | ID: ${cert.credentialId}`;
            if (cert.credentialUrl) certText += ` | URL: ${cert.credentialUrl}`;
            
            return `[CERT ${index + 1}] ${certText}`;
          }).join('\n');
          console.log('üèÜ Certifications utilisateur COMPL√àTES:', userProfile.certifications.length);
        }

        // ‚úÖ LANGUES D√âTAILL√âES
        if (userProfile.languages && Array.isArray(userProfile.languages)) {
          userLanguagesText = userProfile.languages.map((lang, index) => {
            let langText = `${lang.languageName || 'Langue'} (${lang.proficiencyLevel || 'conversational'})`;
            
            if (lang.certification) langText += ` | Certification: ${lang.certification}`;
            if (lang.description) langText += ` | Description: ${lang.description}`;
            
            return langText;
          }).join(', ');
          console.log('üåç Langues utilisateur COMPL√àTES:', userProfile.languages.length);
        }

        // ‚úÖ CENTRES D'INT√âR√äT D√âTAILL√âS
        if (userProfile.interests && Array.isArray(userProfile.interests)) {
          userInterestsText = userProfile.interests.map((interest, index) => {
            let interestText = `${interest.interestName || 'Int√©r√™t'} (${interest.level || 'Amateur'})`;
            
            if (interest.description) interestText += ` - ${interest.description}`;
            if (interest.category) interestText += ` [${interest.category}]`;
            if (!interest.isActive) interestText += ` (Inactif)`;
            
            return interestText;
          }).join(', ');
          console.log('üéØ Centres d\'int√©r√™t utilisateur COMPLETS:', userProfile.interests.length);
        }
      }

      const prompt = `
Tu es un expert RH qui analyse des annonces d'emploi et compare avec des profils candidats ULTRA-D√âTAILL√âS.

ANNONCE D'EMPLOI √Ä ANALYSER :
${jobText}

${userProfile ? `
PROFIL UTILISATEUR ULTRA-COMPLET ET D√âTAILL√â :

üë§ INFORMATIONS PERSONNELLES :
- Nom: ${userProfile.personalInfo?.firstName} ${userProfile.personalInfo?.lastName}
- Titre actuel: ${userProfile.personalInfo?.title || 'Non sp√©cifi√©'}
- Localisation: ${userProfile.personalInfo?.location || 'Non sp√©cifi√©e'}
- Email: ${userProfile.personalInfo?.email || 'Non fourni'}
- R√©sum√©: ${userProfile.personalInfo?.summary || 'Non fourni'}
- LinkedIn: ${userProfile.personalInfo?.linkedinUrl || 'Non fourni'}

üõ†Ô∏è COMP√âTENCES TECHNIQUES D√âTAILL√âES (${userSkillsList.length}) :
${userSkillsList.map(s => `- ${s.name} (Niveau: ${s.level}, Exp√©rience: ${s.years} ans, Cat√©gorie: ${s.category}${s.isPrimary ? ', ‚≠ê COMP√âTENCE PRINCIPALE' : ''})`).join('\n')}

üíº EXP√âRIENCES PROFESSIONNELLES ULTRA-D√âTAILL√âES (${userProfile.experience?.length || 0}) :
${userExperienceText || 'Aucune exp√©rience renseign√©e'}

üéì FORMATIONS COMPL√àTES (${userProfile.education?.length || 0}) :
${userEducationText || 'Aucune formation renseign√©e'}

üöÄ PROJETS R√âALIS√âS D√âTAILL√âS (${userProfile.projects?.length || 0}) :
${userProjectsText || 'Aucun projet renseign√©'}

üèÜ CERTIFICATIONS D√âTAILL√âES (${userProfile.certifications?.length || 0}) :
${userCertificationsText || 'Aucune certification'}

üåç LANGUES PARL√âES D√âTAILL√âES (${userProfile.languages?.length || 0}) :
${userLanguagesText || 'Aucune langue renseign√©e'}

üéØ CENTRES D'INT√âR√äT D√âTAILL√âS (${userProfile.interests?.length || 0}) :
${userInterestsText || 'Aucun centre d\'int√©r√™t renseign√©'}

INSTRUCTIONS ULTRA-IMPORTANTES :
- Compare PR√âCIS√âMENT chaque comp√©tence de l'annonce avec TOUT le profil utilisateur (comp√©tences, exp√©riences, projets, formations)
- Si une comp√©tence appara√Æt dans les exp√©riences, projets ou technologies utilis√©es, marque userHasSkill: true
- Calcule le userProficiencyLevel en croisant niveau d√©clar√© + exp√©rience pratique + projets r√©alis√©s
- Tiens compte des descriptions d'exp√©riences et r√©alisations pour identifier les comp√©tences implicites
- Consid√®re les technologies utilis√©es dans les projets comme des comp√©tences pratiques
- Score de correspondance bas√© sur l'ENSEMBLE du profil (pas seulement les comp√©tences d√©clar√©es)
- Recommandations hyper-personnalis√©es bas√©es sur TOUTES les donn√©es du profil
` : `
AUCUN PROFIL UTILISATEUR FOURNI
- Marque toutes les comp√©tences avec userHasSkill: false
- userProficiencyLevel: 0 pour toutes les comp√©tences
- Recommandations g√©n√©riques
`}

RETOURNE UNIQUEMENT ce JSON (sans texte d'explication) :

{
  "title": "Titre du poste extrait de l'annonce",
  "company": "Nom de l'entreprise extrait", 
  "location": "Lieu du poste (ville, r√©gion, pays)",
  "contractType": "CDI/CDD/Stage/Freelance/Alternance",
  "experienceRequired": "Niveau d'exp√©rience requis (ex: 2-3 ans, d√©butant accept√©, senior)",
  "salaryRange": "Fourchette salariale si mentionn√©e (ex: 45-55k‚Ç¨, n√©gociable)",
  "extractedSkills": [
    {
      "skillName": "Nom exact de la comp√©tence",
      "category": "Technique/Programmation/Framework/Base de donn√©es/DevOps/Design/Autre",
      "importanceLevel": "essential/desired/nice_to_have",
      "yearsRequired": 2,
      "userHasSkill": ${userProfile ? 'true si l\'utilisateur poss√®de cette comp√©tence selon TOUT SON PROFIL (comp√©tences d√©clar√©es, exp√©riences, projets, technologies utilis√©es)' : 'false'},
      "userProficiencyLevel": ${userProfile ? 'Niveau 1-5 calcul√© selon profil COMPLET (1=d√©butant, 5=expert) en croisant comp√©tences d√©clar√©es + exp√©rience pratique + projets' : '0'}
    }
  ],
  "strengths": [${userProfile ? '"Points forts bas√©s sur TOUT le profil : comp√©tences, exp√©riences d√©taill√©es, projets, formations, certifications qui matchent avec l\'annonce"' : '"Aucun profil pour analyser les forces"'}],
  "weaknesses": [${userProfile ? '"Comp√©tences/exp√©riences manquantes essentielles identifi√©es en comparant avec le profil COMPLET"' : '"Profil utilisateur n√©cessaire pour analyser"'}],
  "recommendations": [${userProfile ? '"Conseils hyper-personnalis√©s bas√©s sur TOUT le profil (formations sugg√©r√©es selon lacunes, projets √† r√©aliser pour acqu√©rir comp√©tences manquantes, certifications utiles, exp√©riences √† valoriser)"' : '"Compl√©tez votre profil pour des recommandations personnalis√©es"'}],
  "canApply": ${userProfile ? 'true si le profil COMPLET correspond suffisamment (>= 60% des comp√©tences essentielles OU exp√©rience pertinente significative)' : 'true'},
  "analysisSummary": "R√©sum√© de l'analyse en 2-3 phrases incluant le niveau de correspondance${userProfile ? ' avec le profil utilisateur ULTRA-COMPLET (exp√©riences, projets, comp√©tences, formations)' : ''}"
}

IMPORTANT: 
- Retourne UNIQUEMENT le JSON, pas de texte avant ou apr√®s
- Sois ULTRA-pr√©cis dans la comparaison avec le profil COMPLET (ne rate aucune comp√©tence implicite)
- ${userProfile ? 'Base-toi sur ABSOLUMENT TOUTES les donn√©es : comp√©tences + exp√©riences d√©taill√©es + projets + technologies + formations + certifications' : 'Marque toutes les correspondances comme false'}
- Une comp√©tence peut √™tre acquise via exp√©rience professionnelle, projets personnels, ou formations m√™me si pas list√©e explicitement
- Consid√®re les descriptions d√©taill√©es d'exp√©riences pour identifier comp√©tences cach√©es`;

      const completion = await groq.chat.completions.create({
        messages: [
          {
            role: "system",
            content: `Tu es un expert RH ultra-sp√©cialis√© dans l'analyse d'annonces d'emploi et la correspondance avec des profils candidats ULTRA-COMPLETS. 
            ${userProfile ? 'COMPARE M√âTICULEUSEMENT avec ABSOLUMENT TOUT le profil fourni (comp√©tences d√©clar√©es + exp√©riences d√©taill√©es avec missions et r√©alisations + projets avec technologies + formations + certifications + langues). Identifie les comp√©tences implicites dans les exp√©riences et projets. Sois r√©aliste mais optimiste dans les correspondances.' : 'Aucun profil fourni, marque toutes les comp√©tences comme non poss√©d√©es.'}
            Retourne UNIQUEMENT du JSON valide, sans texte d'explication.`
          },
          {
            role: "user", 
            content: prompt
          }
        ],
        model: "llama-3.1-8b-instant",
        temperature: 0.1,
        max_tokens: 3000,
        stream: false
      });

      const responseText = completion.choices[0]?.message?.content;
      
      if (!responseText) {
        throw new Error('R√©ponse vide de Groq');
      }

      console.log('ü§ñ R√©ponse brute:', responseText.substring(0, 200) + '...');

      // ‚úÖ NETTOYER LA R√âPONSE
      let cleanedResponse = responseText.trim();
      cleanedResponse = cleanedResponse.replace(/```json\n?/g, '').replace(/```\n?/g, '');
      
      // Supprimer le texte avant le premier {
      const firstBrace = cleanedResponse.indexOf('{');
      if (firstBrace > 0) {
        cleanedResponse = cleanedResponse.substring(firstBrace);
      }
      
      // Supprimer le texte apr√®s le dernier }
      const lastBrace = cleanedResponse.lastIndexOf('}');
      if (lastBrace > 0 && lastBrace < cleanedResponse.length - 1) {
        cleanedResponse = cleanedResponse.substring(0, lastBrace + 1);
      }
      
      try {
        const analysis = JSON.parse(cleanedResponse);
        
        // ‚úÖ CALCULER LE SCORE DE CORRESPONDANCE BAS√â SUR LES VRAIES DONN√âES
        if (analysis.extractedSkills && Array.isArray(analysis.extractedSkills)) {
          const matchingSkills = analysis.extractedSkills.filter(skill => skill.userHasSkill === true);
          const essentialSkills = analysis.extractedSkills.filter(skill => skill.importanceLevel === 'essential');
          const matchingEssentialSkills = essentialSkills.filter(skill => skill.userHasSkill === true);
          
          const totalSkills = analysis.extractedSkills.length;
          const overallScore = totalSkills > 0 ? Math.round((matchingSkills.length / totalSkills) * 100) : 0;
          const essentialScore = essentialSkills.length > 0 ? Math.round((matchingEssentialSkills.length / essentialSkills.length) * 100) : 100;
          
          analysis.overallMatchScore = overallScore;
          analysis.essentialSkillsScore = essentialScore;
          
          console.log(`üìä Score calcul√© - Global: ${overallScore}%, Essentiel: ${essentialScore}%`);
          console.log(`üîß Comp√©tences: ${matchingSkills.length}/${totalSkills} match√©es`);
        } else {
          analysis.overallMatchScore = 0;
          analysis.essentialSkillsScore = 0;
        }
        
        console.log('‚úÖ Analyse annonce r√©ussie avec profil utilisateur ULTRA-COMPLET');
        return analysis;
        
      } catch (parseError) {
        console.error('‚ùå Erreur parsing JSON:', parseError);
        console.error('üîç R√©ponse probl√©matique:', cleanedResponse.substring(0, 500));
        return this.extractBasicJobInfo(jobText);
      }

    } catch (error) {
      console.error('‚ùå Erreur Groq analyse annonce:', error);
      return this.extractBasicJobInfo(jobText);
    }
  },

  // ‚≠ê M√âTHODE FALLBACK : Extraction basique d'annonce
  extractBasicJobInfo(jobText) {
    console.log('üîÑ Extraction basique annonce (fallback)');
    
    const analysis = {
      title: "Poste √† analyser",
      company: "Entreprise √† d√©terminer",
      location: "Lieu non sp√©cifi√©",
      contractType: "CDI",
      experienceRequired: "√Ä d√©terminer",
      salaryRange: "Non mentionn√©",
      extractedSkills: [],
      strengths: ["Analyse basique effectu√©e"],
      weaknesses: ["Profil utilisateur n√©cessaire pour une analyse d√©taill√©e"],
      recommendations: ["Compl√©tez votre profil pour des recommandations personnalis√©es", "Utilisez l'IA pour une analyse plus pr√©cise"],
      canApply: true,
      analysisSummary: "Analyse basique effectu√©e. Compl√©tez votre profil utilisateur pour une correspondance pr√©cise.",
      overallMatchScore: 50,
      essentialSkillsScore: 50
    };

    // ‚úÖ TENTATIVE D'EXTRACTION DU TITRE
    const titlePatterns = [
      /(?:poste|titre|job|position)[:\s-]*([^\n]{10,60})/i,
      /(?:recherche|recrute)[:\s-]*([^\n]{10,60})/i,
      /^([A-Z][a-zA-Z\s\/\-]{10,60})(?:\n|$)/m
    ];
    for (const pattern of titlePatterns) {
      const match = jobText.match(pattern);
      if (match) {
        analysis.title = match[1].trim();
        break;
      }
    }

    // ‚úÖ TENTATIVE D'EXTRACTION DE L'ENTREPRISE
    const companyPatterns = [
      /(?:entreprise|company|soci√©t√©)[:\s-]*([^\n]{2,40})/i,
      /(?:chez|at)[:\s-]*([^\n]{2,40})/i
    ];
    for (const pattern of companyPatterns) {
      const match = jobText.match(pattern);
      if (match) {
        analysis.company = match[1].trim();
        break;
      }
    }

    // ‚úÖ EXTRACTION DES COMP√âTENCES COMMUNES
    const commonSkills = [
      { name: 'JavaScript', category: 'Programmation' },
      { name: 'React', category: 'Framework/Librairie' },
      { name: 'Node.js', category: 'Framework/Librairie' },
      { name: 'Python', category: 'Programmation' },
      { name: 'Java', category: 'Programmation' },
      { name: 'PHP', category: 'Programmation' },
      { name: 'SQL', category: 'Base de donn√©es' },
      { name: 'HTML', category: 'Technique' },
      { name: 'CSS', category: 'Technique' },
      { name: 'MongoDB', category: 'Base de donn√©es' },
      { name: 'Docker', category: 'DevOps/Cloud' },
      { name: 'Git', category: 'Technique' },
      { name: 'TypeScript', category: 'Programmation' },
      { name: 'Angular', category: 'Framework/Librairie' },
      { name: 'Vue', category: 'Framework/Librairie' }
    ];

    commonSkills.forEach(skill => {
      const regex = new RegExp(skill.name, 'i');
      if (regex.test(jobText)) {
        analysis.extractedSkills.push({
          skillName: skill.name,
          category: skill.category,
          importanceLevel: 'desired',
          yearsRequired: 1,
          userHasSkill: false,
          userProficiencyLevel: 0
        });
      }
    });

    console.log(`‚úÖ Fallback: ${analysis.extractedSkills.length} comp√©tences trouv√©es`);
    return analysis;
  },

  // ‚≠ê G√âN√âRER UNE LETTRE DE MOTIVATION AVEC PROFIL ULTRA-COMPLET - AM√âLIOR√â
  async generateCoverLetter(jobDescription, userProfile, aiInstructions = '') {
    try {
      console.log('‚úçÔ∏è G√©n√©ration lettre de motivation...');
      console.log('üë§ Profil utilisateur fourni:', !!userProfile);
      
      if (!process.env.GROQ_API_KEY) {
        throw new Error('GROQ_API_KEY non configur√©e');
      }

      // ‚úÖ CONSTRUIRE UN R√âSUM√â ULTRA-D√âTAILL√â DU PROFIL
      let profileSummary = '';

      if (userProfile) {
        console.log('üë§ Construction du r√©sum√© profil ULTRA-d√©taill√©...');
        
        // ‚úÖ INFORMATIONS PERSONNELLES
        profileSummary += `\nüë§ CANDIDAT : ${userProfile.personalInfo?.firstName || 'Pr√©nom'} ${userProfile.personalInfo?.lastName || 'Nom'}`;
        profileSummary += `\nüìç LOCALISATION : ${userProfile.personalInfo?.location || 'Non sp√©cifi√©e'}`;
        profileSummary += `\nüíº TITRE ACTUEL : ${userProfile.personalInfo?.title || 'Candidat'}`;
        if (userProfile.personalInfo?.summary) {
          profileSummary += `\nüìù R√âSUM√â PERSONNEL : ${userProfile.personalInfo.summary}`;
        }
        
        // ‚úÖ COMP√âTENCES TECHNIQUES ULTRA-D√âTAILL√âES
        if (userProfile.skills && userProfile.skills.length > 0) {
          profileSummary += `\n\nüõ†Ô∏è COMP√âTENCES TECHNIQUES (${userProfile.skills.length}) :`;
          userProfile.skills.forEach(skill => {
            profileSummary += `\n- ${skill.skillName || 'Comp√©tence'} (Niveau: ${skill.proficiencyLevel || 'intermediate'}, ${skill.yearsExperience || 0} ans d'exp√©rience, Cat√©gorie: ${skill.category || 'Technique'}${skill.isPrimary ? ', ‚≠ê COMP√âTENCE PRINCIPALE' : ''})`;
          });
        }
        
        // ‚úÖ EXP√âRIENCES PROFESSIONNELLES ULTRA-D√âTAILL√âES
        if (userProfile.experience && userProfile.experience.length > 0) {
          profileSummary += `\n\nüíº EXP√âRIENCES PROFESSIONNELLES (${userProfile.experience.length}) :`;
          userProfile.experience.forEach((exp, index) => {
            profileSummary += `\n${index + 1}. ${exp.position || 'Poste'} chez ${exp.company || 'Entreprise'}`;
            
            // P√©riode compl√®te
            if (exp.startDate || exp.endDate) {
              const period = exp.startDate ? 
                `${exp.startDate}${exp.endDate ? ` - ${exp.endDate}` : ' - Actuellement'}` : 
                `Jusqu'√† ${exp.endDate}`;
              profileSummary += ` (${period})`;
            }
            if (exp.duration) profileSummary += ` [Dur√©e: ${exp.duration}]`;
            
            // Localisation
            if (exp.location) profileSummary += ` - ${exp.location}`;
            
            // Description d√©taill√©e (TR√àS IMPORTANT)
            if (exp.description) {
              profileSummary += `\n   üìù Mission: ${exp.description}`;
            }
            
            // R√©alisations concr√®tes
            if (exp.achievements && exp.achievements.length > 0) {
              profileSummary += `\n   üèÜ R√©alisations:`;
              exp.achievements.forEach(achievement => {
                profileSummary += `\n     ‚Ä¢ ${achievement}`;
              });
            }
            
            // Technologies et comp√©tences utilis√©es
            if (exp.technologiesUsed && exp.technologiesUsed.length > 0) {
              profileSummary += `\n   üõ†Ô∏è Technologies: ${exp.technologiesUsed.join(', ')}`;
            }
            
            // Indicateur si c'est l'emploi actuel
            if (exp.isCurrent) {
              profileSummary += `\n   ‚≠ê POSTE ACTUEL`;
            }
          });
        }
        
        // ‚úÖ FORMATIONS COMPL√àTES
        if (userProfile.education && userProfile.education.length > 0) {
          profileSummary += `\n\nüéì FORMATIONS (${userProfile.education.length}) :`;
          userProfile.education.forEach((edu, index) => {
            profileSummary += `\n${index + 1}. ${edu.degreeType || 'Dipl√¥me'} en ${edu.fieldOfStudy || 'Domaine'} - ${edu.institutionName || '√âtablissement'}`;
            
            if (edu.startDate || edu.endDate) {
              const period = edu.startDate ? 
                `${edu.startDate}${edu.endDate ? ` - ${edu.endDate}` : ' - En cours'}` : 
                `Jusqu'√† ${edu.endDate}`;
              profileSummary += ` (${period})`;
            }
            
            if (edu.location) profileSummary += ` - ${edu.location}`;
            if (edu.grade) profileSummary += ` | Mention: ${edu.grade}`;
            if (edu.description) profileSummary += `\n   Description: ${edu.description}`;
            if (edu.honors && edu.honors.length > 0) profileSummary += `\n   Distinctions: ${edu.honors.join(', ')}`;
          });
        }
        
        // ‚úÖ PROJETS R√âALIS√âS ULTRA-D√âTAILL√âS
        if (userProfile.projects && userProfile.projects.length > 0) {
          profileSummary += `\n\nüöÄ PROJETS R√âALIS√âS (${userProfile.projects.length}) :`;
          userProfile.projects.forEach((proj, index) => {
            profileSummary += `\n${index + 1}. ${proj.projectName || 'Projet'}`;
            if (proj.description) profileSummary += ` - ${proj.description}`;
            
            if (proj.technologiesUsed && proj.technologiesUsed.length > 0) {
              profileSummary += `\n   Technologies: ${proj.technologiesUsed.join(', ')}`;
            }
            
            if (proj.projectUrl) profileSummary += `\n   URL: ${proj.projectUrl}`;
            if (proj.repositoryUrl) profileSummary += `\n   Repository: ${proj.repositoryUrl}`;
            
            if (proj.startDate || proj.endDate) {
              const period = proj.startDate ? 
                `${proj.startDate}${proj.endDate ? ` - ${proj.endDate}` : ' - En cours'}` : 
                `Jusqu'√† ${proj.endDate}`;
              profileSummary += `\n   P√©riode: ${period}`;
            }
            
            if (proj.isOngoing) profileSummary += `\n   ‚≠ê PROJET EN COURS`;
          });
        }
        
        // ‚úÖ CERTIFICATIONS D√âTAILL√âES
        if (userProfile.certifications && userProfile.certifications.length > 0) {
          profileSummary += `\n\nüèÜ CERTIFICATIONS (${userProfile.certifications.length}) :`;
          userProfile.certifications.forEach((cert, index) => {
            profileSummary += `\n${index + 1}. ${cert.certificationName || 'Certification'} - ${cert.issuingOrganization || 'Organisme'}`;
            
            if (cert.issueDate) profileSummary += ` (Obtenu: ${cert.issueDate})`;
            if (cert.expirationDate && !cert.neverExpires) profileSummary += ` | Expire: ${cert.expirationDate}`;
            if (cert.neverExpires) profileSummary += ` | Valide √† vie`;
            if (cert.credentialId) profileSummary += `\n   ID: ${cert.credentialId}`;
            if (cert.credentialUrl) profileSummary += `\n   URL: ${cert.credentialUrl}`;
          });
        }
        
        // ‚úÖ LANGUES D√âTAILL√âES
        if (userProfile.languages && userProfile.languages.length > 0) {
          profileSummary += `\n\nüåç LANGUES (${userProfile.languages.length}) :`;
          userProfile.languages.forEach(lang => {
            profileSummary += `\n- ${lang.languageName || 'Langue'} (${lang.proficiencyLevel || 'conversational'})`;
            if (lang.certification) profileSummary += ` | Certification: ${lang.certification}`;
            if (lang.description) profileSummary += ` | ${lang.description}`;
          });
        }
        
        // ‚úÖ CENTRES D'INT√âR√äT D√âTAILL√âS
        if (userProfile.interests && userProfile.interests.length > 0) {
          profileSummary += `\n\nüéØ CENTRES D'INT√âR√äT (${userProfile.interests.length}) :`;
          userProfile.interests.forEach(interest => {
            profileSummary += `\n- ${interest.interestName || 'Int√©r√™t'} (${interest.level || 'Amateur'})`;
            if (interest.description) profileSummary += ` - ${interest.description}`;
            if (interest.category) profileSummary += ` [${interest.category}]`;
          });
        }
        
        console.log('‚úÖ R√©sum√© profil ULTRA-COMPLET construit:', profileSummary.length, 'caract√®res');
      } else {
        profileSummary = '\n‚ùå AUCUN PROFIL UTILISATEUR FOURNI - G√©n√©ration de lettre g√©n√©rique';
        console.log('‚ö†Ô∏è Aucun profil fourni pour la g√©n√©ration');
      }

      const prompt = `
Tu es un expert en r√©daction de lettres de motivation ultra-personnalis√©es.

DESCRIPTION DU POSTE :
${jobDescription}
${profileSummary}

INSTRUCTIONS SP√âCIALES :
${aiInstructions || 'Lettre professionnelle standard'}

INSTRUCTIONS ULTRA-IMPORTANTES :
1. ANALYSE D'ABORD le secteur et type du poste (tech, commercial, finance, sant√©, etc.)
2. IDENTIFIE les exp√©riences du candidat PERTINENTES pour ce secteur sp√©cifique
3. UTILISE les descriptions d√©taill√©es d'exp√©riences, missions, et r√©alisations concr√®tes
4. METS EN AVANT les technologies et comp√©tences utilis√©es dans les exp√©riences pertinentes
5. √âTABLIS des liens concrets entre les r√©alisations pass√©es et les besoins du poste
6. VALORISE les projets personnels s'ils sont en rapport avec le secteur
7. ADAPTE le ton selon le secteur et les instructions utilisateur
8. RESTE dans le cadre de l'annonce - ne mentionne QUE les √©l√©ments pertinents
9. UTILISE les chiffres et r√©sultats concrets des r√©alisations si disponibles
10. PERSONNALISE avec le nom, localisation et √©l√©ments sp√©cifiques du profil

STRUCTURE ATTENDUE :
1. Introduction personnalis√©e : Nom du candidat + motivation pour CE secteur/entreprise
2. Exp√©riences PERTINENTES avec missions et r√©alisations concr√®tes chiffr√©es 
3. Comp√©tences techniques et projets en rapport avec le poste
4. Formations/certifications pertinentes si applicables
5. Conclusion adapt√©e au secteur avec call-to-action

G√âN√âRER une lettre qui montre que le candidat MA√éTRISE le secteur et a les exp√©riences/comp√©tences appropri√©es.
UTILISER les vraies donn√©es du profil (noms d'entreprises, projets r√©els, technologies ma√Ætris√©es).
NE PAS inventer d'informations non pr√©sentes dans le profil.
`;

      const completion = await groq.chat.completions.create({
        messages: [
          {
            role: "system",
            content: "Tu es un expert en r√©daction de lettres de motivation ultra-personnalis√©es. Tu utilises TOUTES les informations d√©taill√©es du profil candidat (exp√©riences avec descriptions compl√®tes, projets avec technologies, r√©alisations chiffr√©es, formations) pour cr√©er des lettres sur-mesure qui montrent une parfaite ad√©quation avec le poste. Tu ne mentionnes QUE les √©l√©ments pertinents pour le secteur vis√©."
          },
          {
            role: "user",
            content: prompt
          }
        ],
        model: "llama-3.1-8b-instant",
        temperature: 0.3,
        max_tokens: 1500,
        stream: false
      });

      const letter = completion.choices[0]?.message?.content;
      
      if (!letter) {
        throw new Error('Impossible de g√©n√©rer la lettre');
      }

      console.log('‚úÖ Lettre g√©n√©r√©e avec succ√®s bas√©e sur le profil ULTRA-COMPLET');
      return letter.trim();

    } catch (error) {
      console.error('‚ùå Erreur g√©n√©ration lettre:', error);
      return `Madame, Monsieur,

Je vous √©cris pour vous faire part de mon int√©r√™t pour le poste propos√© dans votre entreprise. 

Fort de mon exp√©rience et de mes comp√©tences, je suis convaincu de pouvoir apporter une valeur ajout√©e √† votre √©quipe.

Je reste √† votre disposition pour tout compl√©ment d'information et serais ravi de vous rencontrer pour discuter de ma candidature.

Cordialement.`;
    }
  }
};

module.exports = groqService;