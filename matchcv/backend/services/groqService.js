const Groq = require('groq-sdk');

// ‚≠ê V√âRIFIER : Initialisation du client Groq
const groq = new Groq({
  apiKey: process.env.GROQ_API_KEY
});

const groqService = {
  
  async analyzeCVAndExtractProfile(cvText) {
    try {
      console.log('ü§ñ D√©but analyse CV avec Groq...');
      
      if (!process.env.GROQ_API_KEY) {
        throw new Error('GROQ_API_KEY non configur√©e dans les variables d\'environnement');
      }

const prompt = `
Tu es un expert en analyse de CV. Analyse le CV suivant et extrait les informations dans un format JSON structur√©.

CV √Ä ANALYSER:
${cvText}

INSTRUCTIONS IMPORTANTES:
1. Extrait toutes les informations personnelles, exp√©riences, formations, comp√©tences, etc.
2. Structure les donn√©es selon le format demand√©
3. Pour les dates, utilise le format YYYY-MM-DD quand possible
4. RESPECTE ABSOLUMENT les valeurs enum suivantes:

VALEURS ENUM OBLIGATOIRES:
- skills.category: UNIQUEMENT "Technique", "Programmation", "Framework/Librairie", "Base de donn√©es", "DevOps/Cloud", "Design/UX", "Gestion de projet", "Marketing", "Communication", "Langues", "Soft Skills", "Autre"
- skills.proficiencyLevel: UNIQUEMENT "beginner", "intermediate", "advanced", "expert", "master"
- interests.category: UNIQUEMENT "Sport", "Arts", "Musique", "Lecture", "Cuisine", "Voyage", "Technologie", "Jeux", "Nature", "B√©n√©volat", "Culture", "Loisirs", "Collection", "Artisanat", "Autre"
- interests.level: UNIQUEMENT "D√©butant", "Amateur", "Passionn√©", "Expert", "Professionnel"
- languages.proficiencyLevel: UNIQUEMENT "basic", "conversational", "fluent", "native", "professional"

R√âPONSE ATTENDUE - UNIQUEMENT LE JSON (pas de texte explicatif avant ou apr√®s):
{
  "personalInfo": {
    "firstName": "",
    "lastName": "",
    "email": "",
    "phone": "",
    "location": "",
    "title": "",
    "summary": "",
    "linkedinUrl": "",
    "githubUrl": "",
    "portfolioUrl": ""
  },
  "experience": [{
    "company": "",
    "position": "",
    "startDate": "",
    "endDate": "",
    "isCurrent": false,
    "location": "",
    "description": "",
    "achievements": [],
    "technologiesUsed": []
  }],
  "education": [{
    "institutionName": "",
    "degreeType": "",
    "fieldOfStudy": "",
    "location": "",
    "startDate": "",
    "endDate": "",
    "grade": "",
    "description": "",
    "honors": []
  }],
  "skills": [{
    "skillName": "",
    "category": "Technique",
    "proficiencyLevel": "intermediate",
    "yearsExperience": 1,
    "isPrimary": false
  }],
  "languages": [{
    "languageName": "",
    "proficiencyLevel": "conversational",
    "certification": "",
    "description": ""
  }],
  "projects": [{
    "projectName": "",
    "description": "",
    "projectUrl": "",
    "repositoryUrl": "",
    "technologiesUsed": [],
    "startDate": "",
    "endDate": "",
    "isOngoing": false,
    "screenshots": []
  }],
  "certifications": [{
    "certificationName": "",
    "issuingOrganization": "",
    "credentialId": "",
    "issueDate": "",
    "expirationDate": "",
    "credentialUrl": "",
    "neverExpires": false
  }],
  "interests": [{
    "interestName": "",
    "category": "Loisirs",
    "description": "",
    "level": "Amateur",
    "isActive": true
  }]
}

IMPORTANT: Retourne UNIQUEMENT le JSON, sans texte d'introduction ou d'explication.
Pour les comp√©tences web, utilise "Technique" ou "Programmation" selon le contexte.`;

      const completion = await groq.chat.completions.create({
        messages: [
          {
            role: "system",
            content: "Tu es un expert en analyse de CV. Tu extrais les informations de CV et les structures en JSON valide avec les bonnes valeurs enum. Retourne UNIQUEMENT le JSON, sans texte explicatif."
          },
          {
            role: "user",
            content: prompt
          }
        ],
        model: "llama-3.1-8b-instant",
        temperature: 0.1,
        max_tokens: 4000,
        top_p: 1,
        stream: false
      });

      const responseText = completion.choices[0]?.message?.content;
      
      if (!responseText) {
        throw new Error('R√©ponse vide de Groq');
      }

      console.log('ü§ñ R√©ponse brute Groq:', responseText.substring(0, 200) + '...');

      let cleanedResponse = responseText.trim();
      
      const firstBrace = cleanedResponse.indexOf('{');
      if (firstBrace > 0) {
        cleanedResponse = cleanedResponse.substring(firstBrace);
        console.log('üßπ Texte d\'introduction supprim√©');
      }
      
      const lastBrace = cleanedResponse.lastIndexOf('}');
      if (lastBrace > 0 && lastBrace < cleanedResponse.length - 1) {
        cleanedResponse = cleanedResponse.substring(0, lastBrace + 1);
        console.log('üßπ Texte de conclusion supprim√©');
      }
      
      cleanedResponse = cleanedResponse.replace(/```json\n?/g, '').replace(/```\n?/g, '');
      cleanedResponse = cleanedResponse.replace(/^\s*```[\s\S]*?\n/, '').replace(/\n```\s*$/, '');
      
      try {
        const extractedData = JSON.parse(cleanedResponse);
        const normalizedData = this.normalizeExtractedData(extractedData);
        
        console.log('‚úÖ Donn√©es extraites et normalis√©es avec succ√®s');
        return normalizedData;
      } catch (parseError) {
        console.error('‚ùå Erreur parsing JSON:', parseError);
        console.error('üîç R√©ponse probl√©matique:', cleanedResponse.substring(0, 500));
        return this.extractBasicInfo(cvText);
      }

    } catch (error) {
      console.error('‚ùå Erreur Groq:', error);
      return this.extractBasicInfo(cvText);
    }
  },

  normalizeExtractedData(data) {
    console.log('üîß Normalisation des valeurs enum...');
    
    if (data.skills && Array.isArray(data.skills)) {
      data.skills = data.skills.map(skill => ({
        ...skill,
        category: this.normalizeSkillCategory(skill.category),
        proficiencyLevel: this.normalizeProficiencyLevel(skill.proficiencyLevel)
      }));
    }

    if (data.interests && Array.isArray(data.interests)) {
      data.interests = data.interests.map(interest => ({
        ...interest,
        category: this.normalizeInterestCategory(interest.category),
        level: this.normalizeInterestLevel(interest.level)
      }));
    }

    if (data.languages && Array.isArray(data.languages)) {
      data.languages = data.languages.map(language => ({
        ...language,
        proficiencyLevel: this.normalizeLanguageProficiency(language.proficiencyLevel)
      }));
    }

    console.log('‚úÖ Normalisation termin√©e');
    return data;
  },

  normalizeSkillCategory(category) {
    const mapping = {
      'Technique': 'Technique',
      'technique': 'Technique',
      'Technical': 'Technique',
      'technical': 'Technique',
      'Programmation': 'Programmation',
      'programmation': 'Programmation',
      'Programming': 'Programmation',
      'programming': 'Programmation',
      'Framework': 'Framework/Librairie',
      'framework': 'Framework/Librairie',
      'Librairie': 'Framework/Librairie',
      'librairie': 'Framework/Librairie',
      'Library': 'Framework/Librairie',
      'library': 'Framework/Librairie',
      'Base de donn√©es': 'Base de donn√©es',
      'base de donn√©es': 'Base de donn√©es',
      'Database': 'Base de donn√©es',
      'database': 'Base de donn√©es',
      'DevOps': 'DevOps/Cloud',
      'devops': 'DevOps/Cloud',
      'Cloud': 'DevOps/Cloud',
      'cloud': 'DevOps/Cloud',
      'Design': 'Design/UX',
      'design': 'Design/UX',
      'UX': 'Design/UX',
      'ux': 'Design/UX',
      'UI/UX': 'Design/UX',
      'Gestion': 'Gestion de projet',
      'gestion': 'Gestion de projet',
      'Project Management': 'Gestion de projet',
      'Marketing': 'Marketing',
      'marketing': 'Marketing',
      'Communication': 'Communication',
      'communication': 'Communication',
      'Soft Skills': 'Soft Skills',
      'soft skills': 'Soft Skills',
      'Personnel': 'Soft Skills',
      'personnel': 'Soft Skills',
      'Personal': 'Soft Skills',
      'personal': 'Soft Skills',
      'Langues': 'Langues',
      'langues': 'Langues',
      'Languages': 'Langues',
      'languages': 'Langues',
      'Langue': 'Langues',
      'langue': 'Langues',
      'Language': 'Langues',
      'language': 'Langues',
      'Autre': 'Autre',
      'autre': 'Autre',
      'Other': 'Autre',
      'other': 'Autre'
    };
    return mapping[category] || 'Technique';
  },

  normalizeProficiencyLevel(level) {
    const mapping = {
      'D√©butant': 'beginner',
      'd√©butant': 'beginner',
      'Beginner': 'beginner',
      'beginner': 'beginner',
      'Interm√©diaire': 'intermediate',
      'interm√©diaire': 'intermediate',
      'Intermediate': 'intermediate',
      'intermediate': 'intermediate',
      'Avanc√©': 'advanced',
      'avanc√©': 'advanced',
      'Advanced': 'advanced',
      'advanced': 'advanced',
      'Expert': 'expert',
      'expert': 'expert',
      'Master': 'master',
      'master': 'master'
    };
    return mapping[level] || 'intermediate';
  },

  normalizeInterestCategory(category) {
    const mapping = {
      'Sport': 'Sport',
      'sport': 'Sport',
      'Sports': 'Sport',
      'sports': 'Sport',
      'Arts': 'Arts',
      'art': 'Arts',
      'Art': 'Arts',
      'arts': 'Arts',
      'Musique': 'Musique',
      'musique': 'Musique',
      'Music': 'Musique',
      'music': 'Musique',
      'Lecture': 'Lecture',
      'lecture': 'Lecture',
      'Reading': 'Lecture',
      'reading': 'Lecture',
      'Cuisine': 'Cuisine',
      'cuisine': 'Cuisine',
      'Cooking': 'Cuisine',
      'cooking': 'Cuisine',
      'Voyage': 'Voyage',
      'voyage': 'Voyage',
      'Travel': 'Voyage',
      'travel': 'Voyage',
      'Technologie': 'Technologie',
      'technologie': 'Technologie',
      'Technology': 'Technologie',
      'technology': 'Technologie',
      'Jeux': 'Jeux',
      'jeux': 'Jeux',
      'Games': 'Jeux',
      'games': 'Jeux',
      'Gaming': 'Jeux',
      'gaming': 'Jeux',
      'Nature': 'Nature',
      'nature': 'Nature',
      'B√©n√©volat': 'B√©n√©volat',
      'b√©n√©volat': 'B√©n√©volat',
      'Volunteer': 'B√©n√©volat',
      'volunteer': 'B√©n√©volat',
      'Culture': 'Culture',
      'culture': 'Culture',
      'Cultural': 'Culture',
      'cultural': 'Culture',
      'Loisirs': 'Loisirs',
      'loisirs': 'Loisirs',
      'Hobby': 'Loisirs',
      'hobby': 'Loisirs',
      'Personal': 'Loisirs',
      'personal': 'Loisirs',
      'Collection': 'Collection',
      'collection': 'Collection',
      'Artisanat': 'Artisanat',
      'artisanat': 'Artisanat',
      'Craft': 'Artisanat',
      'craft': 'Artisanat',
      'Autre': 'Autre',
      'autre': 'Autre',
      'Other': 'Autre',
      'other': 'Autre'
    };
    return mapping[category] || 'Loisirs';
  },

  normalizeInterestLevel(level) {
    const mapping = {
      'D√©butant': 'D√©butant',
      'd√©butant': 'D√©butant',
      'Beginner': 'D√©butant',
      'beginner': 'D√©butant',
      'Amateur': 'Amateur',
      'amateur': 'Amateur',
      'Hobby': 'Amateur',
      'hobby': 'Amateur',
      'Intermediate': 'Amateur',
      'intermediate': 'Amateur',
      'Passionn√©': 'Passionn√©',
      'passionn√©': 'Passionn√©',
      'Passionate': 'Passionn√©',
      'passionate': 'Passionn√©',
      'Expert': 'Expert',
      'expert': 'Expert',
      'Advanced': 'Expert',
      'advanced': 'Expert',
      'Professionnel': 'Professionnel',
      'professionnel': 'Professionnel',
      'Professional': 'Professionnel',
      'professional': 'Professionnel'
    };
    return mapping[level] || 'Amateur';
  },

  normalizeLanguageProficiency(level) {
    const mapping = {
      'D√©butant': 'basic',
      'd√©butant': 'basic',
      'Beginner': 'basic',
      'beginner': 'basic',
      'basic': 'basic',
      'Basic': 'basic',
      'Interm√©diaire': 'conversational',
      'interm√©diaire': 'conversational',
      'Intermediate': 'conversational',
      'intermediate': 'conversational',
      'conversational': 'conversational',
      'Conversational': 'conversational',
      'Avanc√©': 'fluent',
      'avanc√©': 'fluent',
      'Advanced': 'fluent',
      'advanced': 'fluent',
      'fluent': 'fluent',
      'Fluent': 'fluent',
      'Natif': 'native',
      'natif': 'native',
      'Native': 'native',
      'native': 'native',
      'Langue maternelle': 'native',
      'langue maternelle': 'native',
      'Professionnel': 'professional',
      'professionnel': 'professional',
      'Professional': 'professional',
      'professional': 'professional'
    };
    return mapping[level] || 'conversational';
  },

  extractBasicInfo(cvText) {
    console.log('üîÑ Utilisation de l\'extraction basique (fallback)');
    
    const lines = cvText.split('\n').map(line => line.trim()).filter(line => line);
    
    const nameRegex = /\*\*([^*]+)\*\*/;
    let firstName = '';
    let lastName = '';
    
    const fullNameMatch = cvText.match(nameRegex);
    if (fullNameMatch) {
      const fullName = fullNameMatch[1].trim();
      const nameParts = fullName.split(/\s+/);
      
      if (nameParts.length >= 2) {
        firstName = nameParts[0];
        lastName = nameParts.slice(1).join(' ');
      } else {
        firstName = fullName;
      }
    }
    
    const emailMatch = cvText.match(/[\w.-]+@[\w.-]+\.\w+/);
    const email = emailMatch ? emailMatch[0] : '';
    
    const phoneMatch = cvText.match(/üìû\s*([0-9\s\-\+\(\)]{10,})/);
    const phone = phoneMatch ? phoneMatch[1].trim() : '';
    
    const extractedData = {
      personalInfo: {
        firstName,
        lastName,
        email,
        phone,
        location: '',
        title: '',
        summary: '',
        linkedinUrl: '',
        githubUrl: '',
        portfolioUrl: ''
      },
      experience: [],
      education: [],
      skills: [],
      languages: [],
      projects: [],
      certifications: [],
      interests: []
    };

    const skillsSection = cvText.match(/(?:COMP√âTENCES|SKILLS)([\s\S]*?)(?=(?:\n#{1,3}|\n[A-Z]{2,}|\n---|\Z))/i);
    if (skillsSection) {
      const skillsText = skillsSection[1];
      const skills = skillsText.match(/(?:JavaScript|React|Vue|Node|Python|PHP|Java|HTML|CSS|SQL|MongoDB|MySQL|Docker|AWS|Git|TypeScript|Angular|Figma)/gi) || [];
      
      skills.forEach(skill => {
        extractedData.skills.push({
          skillName: skill,
          category: 'Technique',
          proficiencyLevel: 'intermediate',
          yearsExperience: 1,
          isPrimary: false
        });
      });
    }

    if (cvText.match(/fran√ßais/i)) {
      extractedData.languages.push({
        languageName: 'Fran√ßais',
        proficiencyLevel: 'native',
        certification: '',
        description: ''
      });
    }

    if (cvText.match(/anglais/i)) {
      extractedData.languages.push({
        languageName: 'Anglais',
        proficiencyLevel: 'conversational',
        certification: '',
        description: ''
      });
    }

    console.log('‚úÖ Donn√©es extraites (fallback):', Object.keys(extractedData));
    return extractedData;
  },

  // ‚≠ê ANALYSER UNE ANNONCE D'EMPLOI AVEC PROFIL UTILISATEUR COMPLET - AM√âLIOR√â
  async analyzeJob(jobText, userProfile = null) {
    try {
      console.log('üîç D√©but analyse annonce d\'emploi...');
      console.log('üë§ Profil utilisateur fourni:', !!userProfile);
      
      if (!process.env.GROQ_API_KEY) {
        throw new Error('GROQ_API_KEY non configur√©e');
      }

      // ‚úÖ CONSTRUIRE UNE DESCRIPTION COMPL√àTE DU PROFIL
      let userSkillsList = [];
      let userExperienceText = '';
      let userEducationText = '';
      let userProjectsText = '';
      let userCertificationsText = '';
      let userLanguagesText = '';
      let userInterestsText = '';
      
      if (userProfile) {
        // ‚úÖ COMP√âTENCES D√âTAILL√âES
        if (userProfile.skills && Array.isArray(userProfile.skills)) {
          userSkillsList = userProfile.skills.map(skill => ({
            name: skill.skillName,
            level: skill.proficiencyLevel,
            years: skill.yearsExperience || 0,
            category: skill.category || 'Technique',
            isPrimary: skill.isPrimary || false
          }));
          console.log('üõ†Ô∏è Comp√©tences utilisateur:', userSkillsList.length);
        }

        // ‚úÖ EXP√âRIENCES D√âTAILL√âES
        if (userProfile.experience && Array.isArray(userProfile.experience)) {
          userExperienceText = userProfile.experience.map(exp => 
            `${exp.position} chez ${exp.company} (${exp.duration || 'dur√©e non sp√©cifi√©e'}) - ${exp.description || 'Description non fournie'}`
          ).join(' | ');
          console.log('üíº Exp√©riences utilisateur:', userProfile.experience.length);
        }

        // ‚úÖ FORMATIONS D√âTAILL√âES
        if (userProfile.education && Array.isArray(userProfile.education)) {
          userEducationText = userProfile.education.map(edu => 
            `${edu.degreeType} en ${edu.fieldOfStudy} √† ${edu.institutionName} (${edu.grade || 'pas de mention'})`
          ).join(' | ');
          console.log('üéì Formations utilisateur:', userProfile.education.length);
        }

        // ‚úÖ PROJETS D√âTAILL√âS
        if (userProfile.projects && Array.isArray(userProfile.projects)) {
          userProjectsText = userProfile.projects.map(proj => 
            `${proj.projectName}: ${proj.description} (Technologies: ${proj.technologiesUsed?.join(', ') || 'non sp√©cifi√©es'})`
          ).join(' | ');
          console.log('üöÄ Projets utilisateur:', userProfile.projects.length);
        }

        // ‚úÖ CERTIFICATIONS D√âTAILL√âES
        if (userProfile.certifications && Array.isArray(userProfile.certifications)) {
          userCertificationsText = userProfile.certifications.map(cert => 
            `${cert.certificationName} d√©livr√© par ${cert.issuingOrganization}`
          ).join(' | ');
          console.log('üèÜ Certifications utilisateur:', userProfile.certifications.length);
        }

        // ‚úÖ LANGUES D√âTAILL√âES
        if (userProfile.languages && Array.isArray(userProfile.languages)) {
          userLanguagesText = userProfile.languages.map(lang => 
            `${lang.languageName} (${lang.proficiencyLevel})`
          ).join(', ');
          console.log('üåç Langues utilisateur:', userProfile.languages.length);
        }

        // ‚úÖ CENTRES D'INT√âR√äT
        if (userProfile.interests && Array.isArray(userProfile.interests)) {
          userInterestsText = userProfile.interests.map(interest => 
            `${interest.interestName} (${interest.level})`
          ).join(', ');
          console.log('üéØ Centres d\'int√©r√™t utilisateur:', userProfile.interests.length);
        }
      }

      const prompt = `
Tu es un expert RH qui analyse des annonces d'emploi et compare avec des profils candidats.

ANNONCE D'EMPLOI √Ä ANALYSER :
${jobText}

${userProfile ? `
PROFIL UTILISATEUR COMPLET ET D√âTAILL√â :

üë§ INFORMATIONS PERSONNELLES :
- Nom: ${userProfile.personalInfo?.firstName} ${userProfile.personalInfo?.lastName}
- Titre actuel: ${userProfile.personalInfo?.title || 'Non sp√©cifi√©'}
- Localisation: ${userProfile.personalInfo?.location || 'Non sp√©cifi√©e'}
- Email: ${userProfile.personalInfo?.email || 'Non fourni'}

üõ†Ô∏è COMP√âTENCES TECHNIQUES (${userSkillsList.length}) :
${userSkillsList.map(s => `- ${s.name} (Niveau: ${s.level}, Exp√©rience: ${s.years} ans, Cat√©gorie: ${s.category}${s.isPrimary ? ', COMP√âTENCE PRINCIPALE' : ''})`).join('\n')}

üíº EXP√âRIENCES PROFESSIONNELLES (${userProfile.experience?.length || 0}) :
${userExperienceText || 'Aucune exp√©rience renseign√©e'}

üéì FORMATIONS (${userProfile.education?.length || 0}) :
${userEducationText || 'Aucune formation renseign√©e'}

üöÄ PROJETS R√âALIS√âS (${userProfile.projects?.length || 0}) :
${userProjectsText || 'Aucun projet renseign√©'}

üèÜ CERTIFICATIONS (${userProfile.certifications?.length || 0}) :
${userCertificationsText || 'Aucune certification'}

üåç LANGUES PARL√âES (${userProfile.languages?.length || 0}) :
${userLanguagesText || 'Aucune langue renseign√©e'}

üéØ CENTRES D'INT√âR√äT (${userProfile.interests?.length || 0}) :
${userInterestsText || 'Aucun centre d\'int√©r√™t renseign√©'}

INSTRUCTIONS IMPORTANTES :
- Compare PR√âCIS√âMENT chaque comp√©tence de l'annonce avec le profil utilisateur COMPLET
- Prends en compte TOUTES les informations du profil (exp√©riences, formations, projets, certifications)
- Si l'utilisateur poss√®de une comp√©tence (directement ou via exp√©rience/projets), marque userHasSkill: true
- Attribue un userProficiencyLevel bas√© sur le niveau d√©clar√© ET l'exp√©rience pratique
- Calcule un score de correspondance r√©aliste en tenant compte de TOUT le profil
- G√©n√®re des recommandations personnalis√©es bas√©es sur l'ENSEMBLE du profil
` : `
AUCUN PROFIL UTILISATEUR FOURNI
- Marque toutes les comp√©tences avec userHasSkill: false
- userProficiencyLevel: 0 pour toutes les comp√©tences
- Recommandations g√©n√©riques
`}

RETOURNE UNIQUEMENT ce JSON (sans texte d'explication) :

{
  "title": "Titre du poste extrait de l'annonce",
  "company": "Nom de l'entreprise extrait", 
  "location": "Lieu du poste (ville, r√©gion, pays)",
  "contractType": "CDI/CDD/Stage/Freelance/Alternance",
  "experienceRequired": "Niveau d'exp√©rience requis (ex: 2-3 ans, d√©butant accept√©, senior)",
  "salaryRange": "Fourchette salariale si mentionn√©e (ex: 45-55k‚Ç¨, n√©gociable)",
  "extractedSkills": [
    {
      "skillName": "Nom exact de la comp√©tence",
      "category": "Technique/Programmation/Framework/Base de donn√©es/DevOps/Design/Autre",
      "importanceLevel": "essential/desired/nice_to_have",
      "yearsRequired": 2,
      "userHasSkill": ${userProfile ? 'true si l\'utilisateur poss√®de cette comp√©tence selon SON PROFIL COMPLET (comp√©tences d√©clar√©es, exp√©riences, projets)' : 'false'},
      "userProficiencyLevel": ${userProfile ? 'Niveau 1-5 selon le profil utilisateur complet (1=d√©butant, 5=expert) ou 0 si pas la comp√©tence' : '0'}
    }
  ],
  "strengths": [${userProfile ? '"Points forts bas√©s sur les comp√©tences, exp√©riences, projets et formations qui matchent"' : '"Aucun profil pour analyser les forces"'}],
  "weaknesses": [${userProfile ? '"Comp√©tences/exp√©riences manquantes essentielles par rapport au profil complet"' : '"Profil utilisateur n√©cessaire pour analyser"'}],
  "recommendations": [${userProfile ? '"Conseils personnalis√©s bas√©s sur le profil COMPLET et l\'annonce (formations sugg√©r√©es, projets √† r√©aliser, certifications utiles)"' : '"Compl√©tez votre profil pour des recommandations personnalis√©es"'}],
  "canApply": ${userProfile ? 'true si le profil correspond suffisamment (>= 60% des comp√©tences essentielles ou exp√©rience pertinente)' : 'true'},
  "analysisSummary": "R√©sum√© de l'analyse en 2-3 phrases incluant le niveau de correspondance${userProfile ? ' avec le profil utilisateur COMPLET' : ''}"
}

IMPORTANT: 
- Retourne UNIQUEMENT le JSON, pas de texte avant ou apr√®s
- Sois pr√©cis dans la comparaison avec le profil COMPLET
- ${userProfile ? 'Base-toi sur TOUTES les donn√©es du profil fourni (pas seulement les comp√©tences)' : 'Marque toutes les correspondances comme false'}
- Consid√®re qu'une comp√©tence peut √™tre acquise via l'exp√©rience ou les projets m√™me si elle n'est pas list√©e explicitement`;

      const completion = await groq.chat.completions.create({
        messages: [
          {
            role: "system",
            content: `Tu es un expert RH sp√©cialis√© dans l'analyse d'annonces d'emploi et la correspondance avec des profils candidats COMPLETS. 
            ${userProfile ? 'COMPARE PR√âCIS√âMENT avec TOUT le profil fourni (comp√©tences, exp√©riences, projets, formations, certifications) et sois r√©aliste dans les correspondances.' : 'Aucun profil fourni, marque toutes les comp√©tences comme non poss√©d√©es.'}
            Retourne UNIQUEMENT du JSON valide, sans texte d'explication.`
          },
          {
            role: "user", 
            content: prompt
          }
        ],
        model: "llama-3.1-8b-instant",
        temperature: 0.1,
        max_tokens: 3000,
        stream: false
      });

      const responseText = completion.choices[0]?.message?.content;
      
      if (!responseText) {
        throw new Error('R√©ponse vide de Groq');
      }

      console.log('ü§ñ R√©ponse brute:', responseText.substring(0, 200) + '...');

      // ‚úÖ NETTOYER LA R√âPONSE
      let cleanedResponse = responseText.trim();
      cleanedResponse = cleanedResponse.replace(/```json\n?/g, '').replace(/```\n?/g, '');
      
      // Supprimer le texte avant le premier {
      const firstBrace = cleanedResponse.indexOf('{');
      if (firstBrace > 0) {
        cleanedResponse = cleanedResponse.substring(firstBrace);
      }
      
      // Supprimer le texte apr√®s le dernier }
      const lastBrace = cleanedResponse.lastIndexOf('}');
      if (lastBrace > 0 && lastBrace < cleanedResponse.length - 1) {
        cleanedResponse = cleanedResponse.substring(0, lastBrace + 1);
      }
      
      try {
        const analysis = JSON.parse(cleanedResponse);
        
        // ‚úÖ CALCULER LE SCORE DE CORRESPONDANCE BAS√â SUR LES VRAIES DONN√âES
        if (analysis.extractedSkills && Array.isArray(analysis.extractedSkills)) {
          const matchingSkills = analysis.extractedSkills.filter(skill => skill.userHasSkill === true);
          const essentialSkills = analysis.extractedSkills.filter(skill => skill.importanceLevel === 'essential');
          const matchingEssentialSkills = essentialSkills.filter(skill => skill.userHasSkill === true);
          
          const totalSkills = analysis.extractedSkills.length;
          const overallScore = totalSkills > 0 ? Math.round((matchingSkills.length / totalSkills) * 100) : 0;
          const essentialScore = essentialSkills.length > 0 ? Math.round((matchingEssentialSkills.length / essentialSkills.length) * 100) : 100;
          
          analysis.overallMatchScore = overallScore;
          analysis.essentialSkillsScore = essentialScore;
          
          console.log(`üìä Score calcul√© - Global: ${overallScore}%, Essentiel: ${essentialScore}%`);
          console.log(`üîß Comp√©tences: ${matchingSkills.length}/${totalSkills} match√©es`);
        } else {
          analysis.overallMatchScore = 0;
          analysis.essentialSkillsScore = 0;
        }
        
        console.log('‚úÖ Analyse annonce r√©ussie avec profil utilisateur COMPLET');
        return analysis;
        
      } catch (parseError) {
        console.error('‚ùå Erreur parsing JSON:', parseError);
        console.error('üîç R√©ponse probl√©matique:', cleanedResponse.substring(0, 500));
        return this.extractBasicJobInfo(jobText);
      }

    } catch (error) {
      console.error('‚ùå Erreur Groq analyse annonce:', error);
      return this.extractBasicJobInfo(jobText);
    }
  },

  // ‚≠ê M√âTHODE FALLBACK : Extraction basique d'annonce
  extractBasicJobInfo(jobText) {
    console.log('üîÑ Extraction basique annonce (fallback)');
    
    const analysis = {
      title: "Poste √† analyser",
      company: "Entreprise √† d√©terminer",
      location: "Lieu non sp√©cifi√©",
      contractType: "CDI",
      experienceRequired: "√Ä d√©terminer",
      salaryRange: "Non mentionn√©",
      extractedSkills: [],
      strengths: ["Analyse basique effectu√©e"],
      weaknesses: ["Profil utilisateur n√©cessaire pour une analyse d√©taill√©e"],
      recommendations: ["Compl√©tez votre profil pour des recommandations personnalis√©es", "Utilisez l'IA pour une analyse plus pr√©cise"],
      canApply: true,
      analysisSummary: "Analyse basique effectu√©e. Compl√©tez votre profil utilisateur pour une correspondance pr√©cise.",
      overallMatchScore: 50,
      essentialSkillsScore: 50
    };

    // ‚úÖ TENTATIVE D'EXTRACTION DU TITRE
    const titlePatterns = [
      /(?:poste|titre|job|position)[:\s-]*([^\n]{10,60})/i,
      /(?:recherche|recrute)[:\s-]*([^\n]{10,60})/i,
      /^([A-Z][a-zA-Z\s\/\-]{10,60})(?:\n|$)/m
    ];
    for (const pattern of titlePatterns) {
      const match = jobText.match(pattern);
      if (match) {
        analysis.title = match[1].trim();
        break;
      }
    }

    // ‚úÖ TENTATIVE D'EXTRACTION DE L'ENTREPRISE
    const companyPatterns = [
      /(?:entreprise|company|soci√©t√©)[:\s-]*([^\n]{2,40})/i,
      /(?:chez|at)[:\s-]*([^\n]{2,40})/i
    ];
    for (const pattern of companyPatterns) {
      const match = jobText.match(pattern);
      if (match) {
        analysis.company = match[1].trim();
        break;
      }
    }

    // ‚úÖ EXTRACTION DES COMP√âTENCES COMMUNES
    const commonSkills = [
      { name: 'JavaScript', category: 'Programmation' },
      { name: 'React', category: 'Framework/Librairie' },
      { name: 'Node.js', category: 'Framework/Librairie' },
      { name: 'Python', category: 'Programmation' },
      { name: 'Java', category: 'Programmation' },
      { name: 'PHP', category: 'Programmation' },
      { name: 'SQL', category: 'Base de donn√©es' },
      { name: 'HTML', category: 'Technique' },
      { name: 'CSS', category: 'Technique' },
      { name: 'MongoDB', category: 'Base de donn√©es' },
      { name: 'Docker', category: 'DevOps/Cloud' },
      { name: 'Git', category: 'Technique' },
      { name: 'TypeScript', category: 'Programmation' },
      { name: 'Angular', category: 'Framework/Librairie' },
      { name: 'Vue', category: 'Framework/Librairie' }
    ];

    commonSkills.forEach(skill => {
      const regex = new RegExp(skill.name, 'i');
      if (regex.test(jobText)) {
        analysis.extractedSkills.push({
          skillName: skill.name,
          category: skill.category,
          importanceLevel: 'desired',
          yearsRequired: 1,
          userHasSkill: false,
          userProficiencyLevel: 0
        });
      }
    });

    console.log(`‚úÖ Fallback: ${analysis.extractedSkills.length} comp√©tences trouv√©es`);
    return analysis;
  },

  // ‚≠ê G√âN√âRER UNE LETTRE DE MOTIVATION AVEC PROFIL COMPLET - AM√âLIOR√â
  async generateCoverLetter(jobDescription, userProfile, aiInstructions = '') {
    try {
      console.log('‚úçÔ∏è G√©n√©ration lettre de motivation...');
      console.log('üë§ Profil utilisateur fourni:', !!userProfile);
      
      if (!process.env.GROQ_API_KEY) {
        throw new Error('GROQ_API_KEY non configur√©e');
      }

      // ‚úÖ CONSTRUIRE UN R√âSUM√â D√âTAILL√â DU PROFIL
      let profileSummary = '';

      if (userProfile) {
        console.log('üë§ Construction du r√©sum√© profil d√©taill√©...');
        
        // ‚úÖ INFORMATIONS PERSONNELLES
        profileSummary += `\nüë§ CANDIDAT : ${userProfile.personalInfo?.firstName || 'Pr√©nom'} ${userProfile.personalInfo?.lastName || 'Nom'}`;
        profileSummary += `\nüìç LOCALISATION : ${userProfile.personalInfo?.location || 'Non sp√©cifi√©e'}`;
        profileSummary += `\nüíº TITRE ACTUEL : ${userProfile.personalInfo?.title || 'Candidat'}`;
        if (userProfile.personalInfo?.summary) {
          profileSummary += `\nüìù R√âSUM√â : ${userProfile.personalInfo.summary}`;
        }
        
        // ‚úÖ COMP√âTENCES D√âTAILL√âES
        if (userProfile.skills && userProfile.skills.length > 0) {
          profileSummary += `\n\nüõ†Ô∏è COMP√âTENCES TECHNIQUES (${userProfile.skills.length}) :`;
          userProfile.skills.forEach(skill => {
            profileSummary += `\n- ${skill.skillName || 'Comp√©tence'} (${skill.proficiencyLevel || 'intermediate'}, ${skill.yearsExperience || 0} ans d'exp√©rience, cat√©gorie: ${skill.category || 'Technique'})`;
          });
        }
        
        // ‚úÖ EXP√âRIENCES PROFESSIONNELLES D√âTAILL√âES
        if (userProfile.experience && userProfile.experience.length > 0) {
          profileSummary += `\n\nüíº EXP√âRIENCES PROFESSIONNELLES (${userProfile.experience.length}) :`;
          userProfile.experience.forEach((exp, index) => {
            profileSummary += `\n${index + 1}. ${exp.position || 'Poste'} chez ${exp.company || 'Entreprise'}`;
            if (exp.duration) profileSummary += ` (${exp.duration})`;
            if (exp.location) profileSummary += ` - ${exp.location}`;
            if (exp.description) profileSummary += `\n   Description: ${exp.description}`;
            if (exp.achievements && exp.achievements.length > 0) {
              profileSummary += `\n   R√©alisations: ${exp.achievements.join(', ')}`;
            }
          });
        }
        
        // ‚úÖ FORMATIONS
        if (userProfile.education && userProfile.education.length > 0) {
          profileSummary += `\n\nüéì FORMATIONS (${userProfile.education.length}) :`;
          userProfile.education.forEach((edu, index) => {
            profileSummary += `\n${index + 1}. ${edu.degreeType || 'Dipl√¥me'} en ${edu.fieldOfStudy || 'Domaine'} - ${edu.institutionName || '√âtablissement'}`;
            if (edu.graduationYear) profileSummary += ` (${edu.graduationYear})`;
            if (edu.description) profileSummary += `\n   Description: ${edu.description}`;
          });
        }
        
        // ‚úÖ PROJETS R√âALIS√âS
        if (userProfile.projects && userProfile.projects.length > 0) {
          profileSummary += `\n\nüöÄ PROJETS R√âALIS√âS (${userProfile.projects.length}) :`;
          userProfile.projects.forEach((proj, index) => {
            profileSummary += `\n${index + 1}. ${proj.projectName || 'Projet'}`;
            if (proj.description) profileSummary += ` - ${proj.description}`;
            if (proj.technologiesUsed && proj.technologiesUsed.length > 0) {
              profileSummary += `\n   Technologies: ${proj.technologiesUsed.join(', ')}`;
            }
            if (proj.projectUrl) profileSummary += `\n   URL: ${proj.projectUrl}`;
          });
        }
        
        // ‚úÖ CERTIFICATIONS
        if (userProfile.certifications && userProfile.certifications.length > 0) {
          profileSummary += `\n\nüèÜ CERTIFICATIONS (${userProfile.certifications.length}) :`;
          userProfile.certifications.forEach((cert, index) => {
            profileSummary += `\n${index + 1}. ${cert.certificationName || 'Certification'} - ${cert.issuingOrganization || 'Organisme'}`;
            if (cert.issueDate) profileSummary += ` (${cert.issueDate})`;
          });
        }
        
        // ‚úÖ LANGUES
        if (userProfile.languages && userProfile.languages.length > 0) {
          profileSummary += `\n\nüåç LANGUES (${userProfile.languages.length}) :`;
          userProfile.languages.forEach(lang => {
            profileSummary += `\n- ${lang.languageName || 'Langue'} (${lang.proficiencyLevel || 'conversational'})`;
          });
        }
        
        // ‚úÖ CENTRES D'INT√âR√äT
        if (userProfile.interests && userProfile.interests.length > 0) {
          profileSummary += `\n\nüéØ CENTRES D'INT√âR√äT (${userProfile.interests.length}) :`;
          userProfile.interests.forEach(interest => {
            profileSummary += `\n- ${interest.interestName || 'Int√©r√™t'} (${interest.level || 'Amateur'})`;
            if (interest.description) profileSummary += ` - ${interest.description}`;
          });
        }
        
        console.log('‚úÖ R√©sum√© profil construit:', profileSummary.length, 'caract√®res');
      } else {
        profileSummary = '\n‚ùå AUCUN PROFIL UTILISATEUR FOURNI - G√©n√©ration de lettre g√©n√©rique';
        console.log('‚ö†Ô∏è Aucun profil fourni pour la g√©n√©ration');
      }

      const prompt = `
Tu es un expert en r√©daction de lettres de motivation personnalis√©es.

DESCRIPTION DU POSTE :
${jobDescription}
${profileSummary}

INSTRUCTIONS SP√âCIALES :
${aiInstructions || 'Lettre professionnelle standard'}

INSTRUCTIONS CRUCIALES :
1. ANALYSE D'ABORD le secteur du poste.
2. IDENTIFIE les exp√©riences du candidat PERTINENTES pour ce secteur
3. METS EN AVANT ces exp√©riences pertinentes en premier
4. √âTABLIS des liens entre les comp√©tences transversales 
5. ADAPTE le ton selon le secteur.
6. Reste dans le cadre de l'annonce et ne fais pas mention des √©l√©ments qui n'ont aucun rapport avec le type du poste stp


STRUCTURE ATTENDUE :
1. Introduction : Motivation pour CE secteur sp√©cifique et pour l'entreprise
2. Exp√©riences PERTINENTES avec exemples concrets de vos r√©alisations
3. Comp√©tences transversales utiles pour le poste
4. Conclusion adapt√©e au secteur

G√âN√àRE une lettre qui montre que le candidat COMPREND le secteur et a les exp√©riences appropri√©es.
`;

      const completion = await groq.chat.completions.create({
        messages: [
          {
            role: "system",
            content: "Tu es un expert en r√©daction de lettres de motivation professionnelles. G√©n√®re des lettres personnalis√©es, formelles et engageantes en utilisant TOUS les √©l√©ments du profil candidat."
          },
          {
            role: "user",
            content: prompt
          }
        ],
        model: "llama-3.1-8b-instant",
        temperature: 0.3,
        max_tokens: 1500,
        stream: false
      });

      const letter = completion.choices[0]?.message?.content;
      
      if (!letter) {
        throw new Error('Impossible de g√©n√©rer la lettre');
      }

      console.log('‚úÖ Lettre g√©n√©r√©e avec succ√®s bas√©e sur le profil complet');
      return letter.trim();

    } catch (error) {
      console.error('‚ùå Erreur g√©n√©ration lettre:', error);
      return `Madame, Monsieur,

Je vous √©cris pour vous faire part de mon int√©r√™t pour le poste propos√© dans votre entreprise. 

Fort de mon exp√©rience et de mes comp√©tences, je suis convaincu de pouvoir apporter une valeur ajout√©e √† votre √©quipe.

Je reste √† votre disposition pour tout compl√©ment d'information et serais ravi de vous rencontrer pour discuter de ma candidature.

Cordialement.`;
    }
  }
};

module.exports = groqService;