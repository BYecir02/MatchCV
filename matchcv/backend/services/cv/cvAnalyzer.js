const dataExtractor = require('./dataExtractor');

const cvAnalyzer = {
  async analyzeCVAndExtractProfile(cvText, groq) {
    try {
      console.log('ü§ñ D√©but analyse CV avec Groq...');
      
      if (!process.env.GROQ_API_KEY) {
        throw new Error('GROQ_API_KEY non configur√©e dans les variables d\'environnement');
      }

      const prompt = this.buildCVAnalysisPrompt(cvText);

      const completion = await groq.chat.completions.create({
        messages: [
          {
            role: "system",
            content: "Tu es un expert en analyse de CV. Tu extrais les informations et les structures en JSON valide. IMPORTANT: Retourne UNIQUEMENT le JSON, sans texte avant ou apr√®s. Le JSON doit √™tre parfaitement valide et respecter exactement le sch√©ma demand√©."
          },
          {
            role: "user",
            content: prompt
          }
        ],
        model: "llama-3.1-8b-instant",
        temperature: 0.05,
        max_tokens: 4000,
        top_p: 0.9,
        stream: false
      });

      const responseText = completion.choices[0]?.message?.content;
      
      if (!responseText) {
        throw new Error('R√©ponse vide de Groq');
      }

      return this.processResponse(responseText, cvText);

    } catch (error) {
      console.error('‚ùå Erreur Groq:', error);
      return dataExtractor.extractBasicInfo(cvText);
    }
  },

  buildCVAnalysisPrompt(cvText) {
    return `ANALYSE CE CV ET EXTRAIT TOUTES LES INFORMATIONS POSSIBLES:

CV:
${cvText}

INSTRUCTIONS STRICTES - OBLIGATOIRES:

1. S√âPARER CHAQUE EXP√âRIENCE en entr√©e distincte
2. S√âPARER CHAQUE FORMATION en entr√©e distincte  
3. S√âPARER CHAQUE PROJET en entr√©e distincte
4. NE JAMAIS FUSIONNER plusieurs √©l√©ments dans une seule description

EXEMPLES DE S√âPARATION OBLIGATOIRE:

Si le CV contient:
"Employ√© commercial ELDPH (Super U) - Juillet 2024 - Ao√ªt 2024, La madeleine France
Employ√© commercial (KESED Services) - Octobre 2021 - Juin 2023, Cotonou B√©nin"

Cela doit donner 2 entr√©es s√©par√©es:
experience: [
  {
    "company": "ELDPH (Super U)",
    "position": "Employ√© commercial", 
    "startDate": "2024-07",
    "endDate": "2024-08",
    "location": "La madeleine France"
  },
  {
    "company": "KESED Services",
    "position": "Employ√© commercial",
    "startDate": "2021-10", 
    "endDate": "2023-06",
    "location": "Cotonou B√©nin"
  }
]

Si le CV contient:
"CYCLE ING√âNIEUR - Institut Sup√©rieur de l'Electronique et du Num√©rique (ISEN) - Depuis 2023, Lille France
CYCLE PR√âPARATOIRE - Cour Pr√©paratoire Sainte Marie - Stella (CPMS) - 2021 - 2023, Cotonou B√©nin"

Cela doit donner 2 entr√©es s√©par√©es:
education: [
  {
    "institutionName": "Institut Sup√©rieur de l'Electronique et du Num√©rique (ISEN)",
    "degreeType": "CYCLE ING√âNIEUR",
    "startDate": "2023-01",
    "endDate": "",
    "location": "Lille France"
  },
  {
    "institutionName": "Cour Pr√©paratoire Sainte Marie - Stella (CPMS)", 
    "degreeType": "CYCLE PR√âPARATOIRE",
    "startDate": "2021-01",
    "endDate": "2023-12", 
    "location": "Cotonou B√©nin"
  }
]

R√àGLES STRICTES:
- Chaque ligne d'exp√©rience = une entr√©e s√©par√©e dans experience[]
- Chaque ligne de formation = une entr√©e s√©par√©e dans education[]
- Chaque projet = une entr√©e s√©par√©e dans projects[]
- Ne JAMAIS fusionner plusieurs √©l√©ments dans une seule description
- Si une ligne contient plusieurs informations, cr√©er une entr√©e par information
- Respecter EXACTEMENT la structure du CV fourni

PATTERNS √Ä RECONNA√éTRE:

EXP√âRIENCES:
- "Poste - Entreprise - Date - Lieu"
- "Entreprise (Poste) - Date - Lieu" 
- "Poste chez Entreprise - Date - Lieu"

√âDUCATION:
- "DIPL√îME - √âtablissement - Date - Lieu"
- "√âtablissement (Dipl√¥me) - Date - Lieu"

PROJETS:
- "Nom du projet - Description"
- "Projet: Nom - Description"

COMP√âTENCES:
- Chercher dans la section "COMP√âTENCES" ou "SKILLS"
- Extraire chaque technologie mentionn√©e

LANGUES:
- Chercher dans la section "LANGUES" ou "LANGUAGES"
- "Fran√ßais (langue maternelle)" -> languageName: "Fran√ßais", proficiencyLevel: "native"
- "Anglais (interm√©diaire)" -> languageName: "Anglais", proficiencyLevel: "conversational"

R√àGLES STRICTES:
1. Retourne UNIQUEMENT le JSON, sans texte avant ou apr√®s
2. Respecte EXACTEMENT les valeurs enum list√©es
3. Pour les dates: format YYYY-MM-DD si possible, sinon string vide
4. Pour les arrays vides: utilise [] pas null
5. Pour les bool√©ens: true/false, pas "true"/"false"
6. Si une information n'est pas trouv√©e, laisse le champ vide "" ou []

VALEURS ENUM OBLIGATOIRES:
- skills.category: ["Technique", "Programmation", "Framework/Librairie", "Base de donn√©es", "DevOps/Cloud", "Design/UX", "Gestion de projet", "Marketing", "Communication", "Langues", "Soft Skills", "Autre"]
- skills.proficiencyLevel: ["beginner", "intermediate", "advanced", "expert", "master"]
- interests.category: ["Sport", "Arts", "Musique", "Lecture", "Cuisine", "Voyage", "Technologie", "Jeux", "Nature", "B√©n√©volat", "Culture", "Loisirs", "Collection", "Artisanat", "Autre"]
- interests.level: ["D√©butant", "Amateur", "Passionn√©", "Expert", "Professionnel"]
- languages.proficiencyLevel: ["basic", "conversational", "fluent", "native", "professional"]

EXEMPLES DE MAPPING:
- "Avanc√©" -> "advanced"
- "Interm√©diaire" -> "intermediate" 
- "Bases" -> "beginner"
- "Expert" -> "expert"
- "Programmation" -> "Programmation"
- "Base de donn√©es" -> "Base de donn√©es"
- "Framework" -> "Framework/Librairie"

JSON ATTENDU:
{
  "personalInfo": {
    "firstName": "",
    "lastName": "",
    "email": "",
    "phone": "",
    "location": "",
    "title": "",
    "summary": "",
    "linkedinUrl": "",
    "githubUrl": "",
    "portfolioUrl": ""
  },
  "experience": [
    {
      "company": "",
      "position": "",
      "startDate": "",
      "endDate": "",
      "isCurrent": false,
      "location": "",
      "description": "",
      "achievements": [],
      "technologiesUsed": []
    }
  ],
  "education": [
    {
      "institutionName": "",
      "degreeType": "",
      "fieldOfStudy": "",
      "location": "",
      "startDate": "",
      "endDate": "",
      "grade": "",
      "description": "",
      "honors": []
    }
  ],
  "skills": [
    {
      "skillName": "",
      "category": "Technique",
      "proficiencyLevel": "intermediate",
      "yearsExperience": 0,
      "isPrimary": false
    }
  ],
  "languages": [
    {
      "languageName": "",
      "proficiencyLevel": "conversational",
      "certification": "",
      "description": ""
    }
  ],
  "projects": [
    {
      "projectName": "",
      "description": "",
      "projectUrl": "",
      "repositoryUrl": "",
      "technologiesUsed": [],
      "startDate": "",
      "endDate": "",
      "isOngoing": false,
      "screenshots": []
    }
  ],
  "certifications": [
    {
      "certificationName": "",
      "issuingOrganization": "",
      "credentialId": "",
      "issueDate": "",
      "expirationDate": "",
      "credentialUrl": "",
      "neverExpires": false
    }
  ],
  "interests": [
    {
      "interestName": "",
      "category": "Loisirs",
      "description": "",
      "level": "Amateur",
      "isActive": true
    }
  ]
}

IMPORTANT: 
- Analyse TOUT le CV et extrait TOUTES les informations disponibles
- S√âPARE CHAQUE exp√©rience/formation/projet en entr√©e distincte
- Ne laisse rien de c√¥t√©
- Ne fusionne JAMAIS plusieurs √©l√©ments dans une seule description
- Respecte la structure exacte du CV fourni
- Si tu vois plusieurs exp√©riences/formations/projets, cr√©e une entr√©e pour chacun

R√âPONSE: UNIQUEMENT LE JSON CI-DESSUS, RIEN D'AUTRE.`;
  },

  processResponse(responseText, cvText) {
    console.log('ü§ñ R√©ponse brute Groq:', responseText.substring(0, 200) + '...');

    let cleanedResponse = responseText.trim();
    
    const firstBrace = cleanedResponse.indexOf('{');
    const lastBrace = cleanedResponse.lastIndexOf('}');
    
    if (firstBrace >= 0 && lastBrace > firstBrace) {
      cleanedResponse = cleanedResponse.substring(firstBrace, lastBrace + 1);
    }
    
    cleanedResponse = cleanedResponse.replace(/```json\s*/g, '').replace(/```\s*/g, '');
    
    try {
      const extractedData = JSON.parse(cleanedResponse);
      
      const completeData = this.ensureAllSections(extractedData);
      
      const validatedData = this.validateAndNormalizeData(completeData);
      const normalizedData = dataExtractor.normalizeExtractedData(validatedData);
      
      console.log('‚úÖ Donn√©es extraites et valid√©es avec succ√®s');
      console.log('üìä Sections trouv√©es:', {
        personalInfo: !!completeData.personalInfo,
        experience: completeData.experience?.length || 0,
        education: completeData.education?.length || 0,
        skills: completeData.skills?.length || 0,
        languages: completeData.languages?.length || 0,
        projects: completeData.projects?.length || 0,
        interests: completeData.interests?.length || 0
      });
      
      return normalizedData;
    } catch (parseError) {
      console.error('‚ùå Erreur parsing JSON:', parseError);
      console.error('üîç R√©ponse probl√©matique:', cleanedResponse.substring(0, 500));
      return dataExtractor.extractBasicInfo(cvText);
    }
  },

  ensureAllSections(data) {
    const defaultStructure = {
      personalInfo: {
        firstName: "",
        lastName: "",
        email: "",
        phone: "",
        location: "",
        title: "",
        summary: "",
        linkedinUrl: "",
        githubUrl: "",
        portfolioUrl: ""
      },
      experience: [],
      education: [],
      skills: [],
      languages: [],
      projects: [],
      certifications: [],
      interests: []
    };

    const completeData = { ...defaultStructure, ...data };

    if (!Array.isArray(completeData.experience)) completeData.experience = [];
    if (!Array.isArray(completeData.education)) completeData.education = [];
    if (!Array.isArray(completeData.skills)) completeData.skills = [];
    if (!Array.isArray(completeData.languages)) completeData.languages = [];
    if (!Array.isArray(completeData.projects)) completeData.projects = [];
    if (!Array.isArray(completeData.certifications)) completeData.certifications = [];
    if (!Array.isArray(completeData.interests)) completeData.interests = [];

    if (typeof completeData.personalInfo !== 'object' || !completeData.personalInfo) {
      completeData.personalInfo = defaultStructure.personalInfo;
    }

    return completeData;
  },

  validateAndNormalizeData(data) {
    const validSkillCategories = ["Technique", "Programmation", "Framework/Librairie", "Base de donn√©es", "DevOps/Cloud", "Design/UX", "Gestion de projet", "Marketing", "Communication", "Langues", "Soft Skills", "Autre"];
    const validSkillLevels = ["beginner", "intermediate", "advanced", "expert", "master"];
    const validInterestCategories = ["Sport", "Arts", "Musique", "Lecture", "Cuisine", "Voyage", "Technologie", "Jeux", "Nature", "B√©n√©volat", "Culture", "Loisirs", "Collection", "Artisanat", "Autre"];
    const validInterestLevels = ["D√©butant", "Amateur", "Passionn√©", "Expert", "Professionnel"];
    const validLanguageLevels = ["basic", "conversational", "fluent", "native", "professional"];

    if (data.skills && Array.isArray(data.skills)) {
      data.skills = data.skills.map(skill => ({
        ...skill,
        category: validSkillCategories.includes(skill.category) ? skill.category : "Technique",
        proficiencyLevel: validSkillLevels.includes(skill.proficiencyLevel) ? skill.proficiencyLevel : "intermediate",
        yearsExperience: typeof skill.yearsExperience === 'number' ? skill.yearsExperience : 0,
        isPrimary: !!skill.isPrimary
      }));
    }

    if (data.interests && Array.isArray(data.interests)) {
      data.interests = data.interests.map(interest => ({
        ...interest,
        category: validInterestCategories.includes(interest.category) ? interest.category : "Loisirs",
        level: validInterestLevels.includes(interest.level) ? interest.level : "Amateur",
        isActive: !!interest.isActive
      }));
    }

    if (data.languages && Array.isArray(data.languages)) {
      data.languages = data.languages.map(language => ({
        ...language,
        proficiencyLevel: validLanguageLevels.includes(language.proficiencyLevel) ? language.proficiencyLevel : "conversational"
      }));
    }

    return data;
  },

  extractBasicInfo(cvText) {
    console.log('üîç Extraction basique du CV...');
    
    const result = {
      personalInfo: {
        firstName: "",
        lastName: "",
        email: "",
        phone: "",
        location: "",
        title: "",
        summary: "",
        linkedinUrl: "",
        githubUrl: "",
        portfolioUrl: ""
      },
      experience: [],
      education: [],
      skills: [],
      languages: [],
      projects: [],
      certifications: [],
      interests: []
    };

    // Extraction des informations personnelles
    const emailMatch = cvText.match(/\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b/);
    if (emailMatch) {
      result.personalInfo.email = emailMatch[0];
    }

    const phoneMatch = cvText.match(/(?:\+33|0)[1-9](?:[0-9]{8}|[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2})/);
    if (phoneMatch) {
      result.personalInfo.phone = phoneMatch[0];
    }

    // Extraction du titre/r√©sum√©
    const lines = cvText.split('\n').filter(line => line.trim());
    if (lines.length > 0) {
      const firstLine = lines[0].trim();
      if (firstLine.length > 10 && firstLine.length < 100) {
        result.personalInfo.title = firstLine;
      }
    }

    // Extraction des sections avec patterns am√©lior√©s
    const sections = this.extractSections(cvText);
    
    // Extraction des exp√©riences
    if (sections.experience) {
      const experienceLines = sections.experience.split('\n').filter(line => line.trim());
      experienceLines.forEach(line => {
        // Essayer de s√©parer les exp√©riences sur la m√™me ligne
        const expResults = this.parseExperienceLine(line);
        if (Array.isArray(expResults)) {
          // Plusieurs exp√©riences trouv√©es
          expResults.forEach(exp => {
            if (exp) {
              result.experience.push(exp);
            }
          });
        } else if (expResults) {
          // Une seule exp√©rience
          result.experience.push(expResults);
        }
      });
    }

    // Extraction de l'√©ducation
    if (sections.education) {
      const educationLines = sections.education.split('\n').filter(line => line.trim());
      educationLines.forEach(line => {
        const edu = this.parseEducationLine(line);
        if (edu) {
          result.education.push(edu);
        }
      });
    }

    // Extraction des comp√©tences
    if (sections.skills) {
      const skills = this.extractSkills(sections.skills);
      result.skills = skills;
    }

    // Extraction des langues
    if (sections.languages) {
      const languages = this.extractLanguages(sections.languages);
      result.languages = languages;
    }

    // Extraction des projets
    if (sections.projects) {
      const projects = this.extractProjects(sections.projects);
      result.projects = projects;
    }

    return result;
  },

  extractSections(cvText) {
    const sections = {};
    
    // Patterns am√©lior√©s pour d√©tecter les sections
    const sectionPatterns = {
      experience: /(?:EXP√âRIENCES?|EXPERIENCE|EMPLOI|TRAVAIL|STAGE|PARCOURS PROFESSIONNEL)[\s\S]*?(?=(?:√âDUCATION|FORMATION|DIPL√îME|√âTUDES|CYCLE|COMP√âTENCES|SKILLS|LANGUES|PROJETS|R√âALISATIONS|$))/i,
      education: /(?:√âDUCATION|FORMATION|DIPL√îME|√âTUDES|CYCLE|PARCOURS ACAD√âMIQUE)[\s\S]*?(?=(?:EXP√âRIENCES?|EXPERIENCE|EMPLOI|TRAVAIL|STAGE|COMP√âTENCES|SKILLS|LANGUES|PROJETS|R√âALISATIONS|$))/i,
      skills: /(?:COMP√âTENCES?|SKILLS|TECHNOLOGIES?|CONNAISSANCES)[\s\S]*?(?=(?:EXP√âRIENCES?|EXPERIENCE|EMPLOI|TRAVAIL|STAGE|√âDUCATION|FORMATION|DIPL√îME|√âTUDES|CYCLE|LANGUES|PROJETS|R√âALISATIONS|$))/i,
      languages: /(?:LANGUES?|LANGUAGES?|LANGUE)[\s\S]*?(?=(?:EXP√âRIENCES?|EXPERIENCE|EMPLOI|TRAVAIL|STAGE|√âDUCATION|FORMATION|DIPL√îME|√âTUDES|CYCLE|COMP√âTENCES|SKILLS|PROJETS|R√âALISATIONS|$))/i,
      projects: /(?:PROJETS?|R√âALISATIONS?|PORTFOLIO|PROJETS ACAD√âMIQUES)[\s\S]*?(?=(?:EXP√âRIENCES?|EXPERIENCE|EMPLOI|TRAVAIL|STAGE|√âDUCATION|FORMATION|DIPL√îME|√âTUDES|CYCLE|COMP√âTENCES|SKILLS|LANGUES|$))/i
    };

    Object.entries(sectionPatterns).forEach(([key, pattern]) => {
      const match = cvText.match(pattern);
      if (match) {
        // Nettoyer la section en retirant le titre
        let content = match[0];
        const titleMatch = content.match(/^[^\n]+/);
        if (titleMatch) {
          content = content.substring(titleMatch[0].length).trim();
        }
        sections[key] = content;
      }
    });

    // Si aucune section n'est trouv√©e, essayer de d√©tecter par patterns
    if (!sections.experience && !sections.education) {
      // Chercher des patterns d'exp√©riences dans tout le texte
      const experiencePatterns = [
        /([^-]+?)\s*-\s*([^-]+?)\s*-\s*([^-]+?)\s*-\s*([^-]+?)(?=\n|$)/g,
        /([^(]+?)\s*\(([^)]+?)\)\s*-\s*([^-]+?)\s*-\s*([^-]+?)(?=\n|$)/g
      ];
      
      let experienceMatches = [];
      experiencePatterns.forEach(pattern => {
        const matches = [...cvText.matchAll(pattern)];
        experienceMatches = experienceMatches.concat(matches);
      });
      
      if (experienceMatches.length > 0) {
        sections.experience = experienceMatches.map(match => match[0]).join('\n');
      }
    }

    return sections;
  },

  parseExperienceLine(line) {
    // D'abord, essayer de s√©parer si plusieurs exp√©riences sont sur la m√™me ligne
    const experiences = [];
    
    // Pattern pour d√©tecter plusieurs exp√©riences s√©par√©es par des espaces ou ponctuation
    const multiExpPattern = /([^-]+?)\s*-\s*([^-]+?)\s*-\s*([^-]+?)\s*-\s*([^-]+?)(?=\s+[^-]+?\s*-\s*[^-]+?\s*-\s*[^-]+?\s*-\s*[^-]+?|$)/g;
    let match;
    
    while ((match = multiExpPattern.exec(line)) !== null) {
      const [, position, company, dates, location] = match;
      const { startDate, endDate, isCurrent } = this.parseDates(dates);
      
      experiences.push({
        company: company.trim(),
        position: position.trim(),
        startDate,
        endDate,
        isCurrent,
        location: location.trim(),
        description: "",
        achievements: [],
        technologiesUsed: []
      });
    }
    
    // Si on a trouv√© plusieurs exp√©riences, les retourner
    if (experiences.length > 0) {
      return experiences;
    }
    
    // Sinon, essayer les patterns normaux
    const patterns = [
      // Pattern: "Poste - Entreprise - Date - Lieu"
      /^([^-]+?)\s*-\s*([^-]+?)\s*-\s*([^-]+?)\s*-\s*(.+)$/,
      // Pattern: "Entreprise (Poste) - Date - Lieu"
      /^([^(]+?)\s*\(([^)]+?)\)\s*-\s*([^-]+?)\s*-\s*(.+)$/,
      // Pattern: "Poste chez Entreprise - Date - Lieu"
      /^([^-]+?)\s+chez\s+([^-]+?)\s*-\s*([^-]+?)\s*-\s*(.+)$/
    ];

    for (const pattern of patterns) {
      const match = line.match(pattern);
      if (match) {
        const [, position, company, dates, location] = match;
        const { startDate, endDate, isCurrent } = this.parseDates(dates);
        
        return {
          company: company.trim(),
          position: position.trim(),
          startDate,
          endDate,
          isCurrent,
          location: location.trim(),
          description: "",
          achievements: [],
          technologiesUsed: []
        };
      }
    }

    // Si aucun pattern ne match, cr√©er une entr√©e basique
    if (line.trim().length > 10) {
      return {
        company: "",
        position: line.trim(),
        startDate: "",
        endDate: "",
        isCurrent: false,
        location: "",
        description: "",
        achievements: [],
        technologiesUsed: []
      };
    }

    return null;
  },

  parseEducationLine(line) {
    // Pattern pour d√©tecter les formations
    const patterns = [
      // Pattern: "DIPL√îME - √âtablissement - Date - Lieu"
      /^([^-]+?)\s*-\s*([^-]+?)\s*-\s*([^-]+?)\s*-\s*(.+)$/,
      // Pattern: "√âtablissement (Dipl√¥me) - Date - Lieu"
      /^([^(]+?)\s*\(([^)]+?)\)\s*-\s*([^-]+?)\s*-\s*(.+)$/
    ];

    for (const pattern of patterns) {
      const match = line.match(pattern);
      if (match) {
        const [, degree, institution, dates, location] = match;
        const { startDate, endDate } = this.parseDates(dates);
        
        return {
          institutionName: institution.trim(),
          degreeType: degree.trim(),
          fieldOfStudy: "",
          location: location.trim(),
          startDate,
          endDate,
          grade: "",
          description: "",
          honors: []
        };
      }
    }

    // Si aucun pattern ne match, cr√©er une entr√©e basique
    if (line.trim().length > 10) {
      return {
        institutionName: "",
        degreeType: line.trim(),
        fieldOfStudy: "",
        location: "",
        startDate: "",
        endDate: "",
        grade: "",
        description: "",
        honors: []
      };
    }

    return null;
  },

  parseDates(dateString) {
    const currentYear = new Date().getFullYear();
    let startDate = "";
    let endDate = "";
    let isCurrent = false;

    // Pattern pour "Depuis 2023" ou "2023 - Pr√©sent"
    const currentMatch = dateString.match(/(?:Depuis|Since|From)\s+(\d{4})/i) || 
                        dateString.match(/(\d{4})\s*-\s*(?:Pr√©sent|Present|Now|Actuel)/i);
    if (currentMatch) {
      startDate = `${currentMatch[1]}-01`;
      isCurrent = true;
    } else {
      // Pattern pour "2021 - 2023" ou "2021-2023"
      const rangeMatch = dateString.match(/(\d{4})\s*-\s*(\d{4})/);
      if (rangeMatch) {
        startDate = `${rangeMatch[1]}-01`;
        endDate = `${rangeMatch[2]}-12`;
      } else {
        // Pattern pour une seule ann√©e
        const yearMatch = dateString.match(/(\d{4})/);
        if (yearMatch) {
          startDate = `${yearMatch[1]}-01`;
          endDate = `${yearMatch[1]}-12`;
        }
      }
    }

    return { startDate, endDate, isCurrent };
  },

  extractSkills(skillsText) {
    const skills = [];
    const lines = skillsText.split('\n').filter(line => line.trim());
    
    lines.forEach(line => {
      // Pattern pour d√©tecter les comp√©tences
      const skillMatch = line.match(/^([^:]+):\s*(.+)$/);
      if (skillMatch) {
        const [, skillName, description] = skillMatch;
        skills.push({
          skillName: skillName.trim(),
          category: "Technique",
          proficiencyLevel: "intermediate",
          yearsExperience: 0,
          isPrimary: false
        });
      } else if (line.trim().length > 2 && line.trim().length < 50) {
        // Si c'est juste un nom de comp√©tence
        skills.push({
          skillName: line.trim(),
          category: "Technique",
          proficiencyLevel: "intermediate",
          yearsExperience: 0,
          isPrimary: false
        });
      }
    });
    
    return skills;
  },

  extractLanguages(languagesText) {
    const languages = [];
    const lines = languagesText.split('\n').filter(line => line.trim());
    
    lines.forEach(line => {
      // Pattern pour d√©tecter les langues
      const languageMatch = line.match(/^([^(]+?)\s*\(([^)]+?)\)/);
      if (languageMatch) {
        const [, languageName, level] = languageMatch;
        let proficiencyLevel = "conversational";
        
        if (level.toLowerCase().includes("maternelle") || level.toLowerCase().includes("native")) {
          proficiencyLevel = "native";
        } else if (level.toLowerCase().includes("fluent") || level.toLowerCase().includes("courant")) {
          proficiencyLevel = "fluent";
        } else if (level.toLowerCase().includes("basic") || level.toLowerCase().includes("d√©butant")) {
          proficiencyLevel = "basic";
        }
        
        languages.push({
          languageName: languageName.trim(),
          proficiencyLevel,
          certification: "",
          description: ""
        });
      } else if (line.trim().length > 2 && line.trim().length < 30) {
        // Si c'est juste un nom de langue
        languages.push({
          languageName: line.trim(),
          proficiencyLevel: "conversational",
          certification: "",
          description: ""
        });
      }
    });
    
    return languages;
  },

  extractProjects(projectsText) {
    const projects = [];
    const lines = projectsText.split('\n').filter(line => line.trim());
    
    lines.forEach(line => {
      // Pattern pour d√©tecter les projets
      const projectMatch = line.match(/^([^-]+?)\s*-\s*(.+)$/);
      if (projectMatch) {
        const [, projectName, description] = projectMatch;
        projects.push({
          projectName: projectName.trim(),
          description: description.trim(),
          projectUrl: "",
          repositoryUrl: "",
          technologiesUsed: [],
          startDate: "",
          endDate: "",
          isOngoing: false,
          screenshots: []
        });
      } else if (line.trim().length > 5 && line.trim().length < 100) {
        // Si c'est juste un nom de projet
        projects.push({
          projectName: line.trim(),
          description: "",
          projectUrl: "",
          repositoryUrl: "",
          technologiesUsed: [],
          startDate: "",
          endDate: "",
          isOngoing: false,
          screenshots: []
        });
      }
    });
    
    return projects;
  }
};

module.exports = cvAnalyzer;